swagger: '2.0'
######################################################
# Prolog
######################################################
info:
  version: "v1"
  title: "WSO2 API Manager - Gateway"
  description: |
    This specifies a **RESTful API** for WSO2 **API Manager** - **Gateway**.
    Please see [full swagger definition](https://github.com/wso2/carbon-apimgt/blob/v6.7.206/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.

    # Authentication
    Our REST APIs are protected using OAuth2 and access control is achieved through scopes. Before you start invoking
    the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps
    that you will need to follow to obtain an access token.
    First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types
    in the payload. A Sample payload is shown below.
    ```
      {
      "callbackUrl":"www.google.lk",
      "clientName":"rest_api_publisher",
      "owner":"admin",
      "grantType":"client_credentials password refresh_token",
      "saasApp":true
      }
    ```
    Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the
    base64 encoded admin username and password
    **Format of the request**
    ```
      curl -X POST -H "Authorization: Basic Base64(admin_username:admin_password)" -H "Content-Type: application/json"
      \ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register
    ```
    **Sample request**
    ```
      curl -X POST -H "Authorization: Basic YWRtaW46YWRtaW4=" -H "Content-Type: application/json"
      \ -d @payload.json https://localhost:9443/client-registration/v0.17/register
    ```
    Following is a sample response after invoking the above curl.
    ```
    {
    "clientId": "fOCi4vNJ59PpHucC2CAYfYuADdMa",
    "clientName": "rest_api_gateway",
    "callBackURL": "www.google.lk",
    "clientSecret": "a4FwHlq0iCIKVs2MPIIDnepZnYMa",
    "isSaasApplication": true,
    "appOwner": "admin",
    "jsonString": "{\"grant_types\":\"client_credentials password refresh_token\",\"redirect_uris\":\"www.google.lk\",\"client_name\":\"rest_api123\"}",
    "jsonAppAttribute": "{}",
    "tokenType": null
    }
    ```
    Next you must use the above client id and secret to obtain the access token.
    We will be using the password grant type for this, you can use any grant type you desire.
    You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section
    of this document and scope for each resource is given in **authorization** section of resource documentation.
    Following is the format of the request if you are using the password grant type.
    ```
    curl -k -d "grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>"
    \ -H "Authorization: Basic base64(cliet_id:client_secret)"
    \ https://<host>:<gateway_port>/token
    ```
    **Sample request**
    ```
    curl https://localhost:8243/token -k \
    -H "Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h" \
    -d "grant_type=password&username=admin&password=admin&scope=apim:api_publish"
    ```
    Shown below is a sample response to the above request.
    ```
    {
    "access_token": "e79bda48-3406-3178-acce-f6e4dbdcbb12",
    "refresh_token": "a757795d-e69f-38b8-bd85-9aded677a97c",
    "scope": "apim:api_publish",
    "token_type": "Bearer",
    "expires_in": 3600
    }
    ```
    Now you have a valid access token, which you can use to invoke an API.
    Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header.
    If you use a different authentication mechanism, this process may change.
  contact:
    name: "WSO2"
    url: "http://wso2.com/products/api-manager/"
    email: "architecture@wso2.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# The fixed parts of the URLs of the API
######################################################

# The schemes supported by the API
schemes:
  - https

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
host: apis.wso2.com

# The base path of the API.
# Will be prefixed to all paths.
basePath: /api/am/gateway/v1

# The following media types can be passed as input in message bodies of the API.
# The actual media type must be specified in the Content-Type header field of the request.
# The default is json, i.e. the Content-Type header is not needed to
# be set, but supporting it serves extensibility.
consumes:
  - application/json

# The following media types may be passed as output in message bodies of the API.
# The media type(s) consumable by the requestor is specified in the Accept header field
# of the corresponding request.
# The actual media type returned will be specfied in the Content-Type header field
# of the of the response.
# The default of the Accept header is json, i.e. there is not needed to
# set the value, but supporting it serves extensibility.
produces:
  - application/json

securityDefinitions:
  OAuth2Security:
    type: oauth2
    flow: password
    tokenUrl: https://localhost:9443/oauth2/token
    scopes:
      apim:api_publish: Publish API

######################################################
# The "API Collection" resource APIs
######################################################
paths:
  /redeploy-api:

    #-----------------------------------------------------
    # Re Deploy the API in the Gateway
    #-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:api_publish
      x-code-samples:
        - lang: Curl
          source: |-
            curl -k -X POST -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8" "https://127.0.0.1:9443/api/am/gateway/v1/redeploy-api?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com"
      summary: Re Deploy the API in the gateway
      description: |
        This operation is used to re deploy an API in the gateway. If the Tenant domain is not provided carbon.super
        will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - ReDeploy API
      responses:
        200:
          description: |
            OK.
            API successfully deployed in the Gateway.
          schema:
            $ref: '#/definitions/DeployResponse'
        202:
          description: |
            Accepted.
            The request has been accepted.
          schema:
            $ref: '#/definitions/DeployResponse'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        412:
          $ref: '#/responses/PreconditionFailed'

  /undeploy-api:

    #-----------------------------------------------------
    # Undeploy the API in the Gateway
    #-----------------------------------------------------
    post:
      security:
        - OAuth2Security:
            - apim:api_publish
      x-code-samples:
        - lang: Curl
          source: |-
            curl -k -X POST -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8" "https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com"
      summary: Uneploy the API in the gateway
      description: |
        This operation is used to undeploy an API in the gateway. If the Tenant domain is not provided carbon.super will
        be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Undeploy API
      responses:
        200:
          description: |
            OK.
            API successfully undeployed from the Gateway.
          schema:
            $ref: '#/definitions/DeployResponse'
        202:
          description: |
            Accepted.
            The request has been accepted.
          schema:
            $ref: '#/definitions/DeployResponse'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        412:
          $ref: '#/responses/PreconditionFailed'

  /api-artifact:

    #-----------------------------------------------------
    # Get API Artifacts
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:api_publish
      x-code-samples:
        - lang: Curl
          source: |-
            curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8" "https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com"
      summary: Get API artifact from the storage
      description: |
        This operation is used to get the local entries, sequences and endpoints from the storage. If the Tenant domain
        is not provided carbon.super will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Get API Artifacts
      responses:
        200:
          description: |
            OK.
            API artifact successfully retrieved from the storage.
          schema:
            $ref: '#/definitions/APIArtifact'
        202:
          description: |
            Accepted.
            The request has been accepted.
          schema:
            $ref: '#/definitions/APIArtifact'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        412:
          $ref: '#/responses/PreconditionFailed'

  /local-entry:

    #-----------------------------------------------------
    # Get local entry for the API
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:api_publish
      x-code-samples:
        - lang: Curl
          source: |-
            curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8" "https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com"
      summary: Get Local Entry from the storage
      description: |
        This operation is used to get local entry from the storage.If the Tenant domain is not provided carbon.super
        will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Get API Artifacts
      responses:
        200:
          description: |
            OK.
            Local entry for the API successfully retrieved from the storage.
          schema:
            $ref: '#/definitions/LocalEntry'
        202:
          description: |
            Accepted.
            The request has been accepted.
          schema:
            $ref: '#/definitions/LocalEntry'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        412:
          $ref: '#/responses/PreconditionFailed'

  /sequence:
    #-----------------------------------------------------
    # Get sequence for the API
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:api_publish
      x-code-samples:
        - lang: Curl
          source: |-
            curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8" "https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com"
      summary: Get sequences from the storage
      description: |
        This operation is used to get the API sequence from the storage. If the Tenant domain is not provided carbon.super
        will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Get API Artifacts
      responses:
        200:
          description: |
            OK.
            Sequences for the API successfully retrieved from the storage.
          schema:
            $ref: '#/definitions/Sequences'
        202:
          description: |
            Accepted.
            The request has been accepted.
          schema:
            $ref: '#/definitions/Sequences'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        412:
          $ref: '#/responses/PreconditionFailed'

  /end-points:

    #-----------------------------------------------------
    # Get API Artifact
    #-----------------------------------------------------
    get:
      security:
        - OAuth2Security:
            - apim:api_publish
      x-code-samples:
        - lang: Curl
          source: |-
            curl -k -H "Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8" "https://127.0.0.1:9443/api/am/gateway/v1/end-points?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com"
      summary: Get end-points from the storage for the API
      description: |
        This operation is used to get the end-points from the storage. If the Tenant domain is not provided
        carbon.super will be picked as the Tenant domain.
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
        - name: tenantDomain
          description: |
            Tenant Domain of the API
          in: query
          type: string
      tags:
        - Get API Artifacts
      responses:
        200:
          description: |
            OK.
            End-points successfully retrieved from the storage for the API.
          schema:
            $ref: '#/definitions/DeployResponse'
        202:
          description: |
            Accepted.
            The request has been accepted.
          schema:
            $ref: '#/definitions/DeployResponse'
        400:
          $ref: '#/responses/BadRequest'
        404:
          $ref: '#/responses/NotFound'
        412:
          $ref: '#/responses/PreconditionFailed'

######################################################
# Parameters - required by some of the APIs above
######################################################
parameters:

  # API Identifier
  # Specified as part of the query string
  apiId-Q:
    name: apiId
    in: query
    description: |
      **API ID** consisting of the **UUID** of the API.
      The combination of the provider of the API, name of the API and the version is also accepted as a valid API I.
      Should be formatted as **provider-name-version**.
    required: true
    type: string

######################################################
# The response schemas used by the API resources
######################################################
responses:

  # Bad Request Error Response Schema
  BadRequest:
    description: Bad Request. Invalid request or validation error.
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: 400
        message: "Bad Request"
        description: "Invalid request or validation error"
        moreInfo: ""
        error: []

  # Not Found Error Response Schema
  NotFound:
    description: Not Found. The specified resource does not exist.
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: 404
        message: "Not Found"
        description: "The specified resource does not exist"
        moreInfo: ""
        error: []

  # Precondition Failed Error Response Schema
  PreconditionFailed:
    description: Precondition Failed. The request has not been performed because one of the preconditions is not met.
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: 412
        message: "Precondition Failed"
        description: "The request has not been performed because one of the preconditions is not met"
        moreInfo: ""
        error: []

######################################################
# The resources used by some of the APIs above within the message body
######################################################
definitions:
  #-----------------------------------------------------
  # The deploy response resource
  #-----------------------------------------------------
  DeployResponse:
    title: Deploy API Response
    required:
      - deployStatus
    properties:
      deployStatus:
        description: |
          This attribute declares whether deployment task is successful or failed.
        type: string
        enum:
          - DEPLOYED
          - ERROR
        example: DEPLOYED
      jsonPayload:
        description: |
          Attributes that returned after the API deployment
        type: string

  #-----------------------------------------------------
  # The Endpoint response resource
  #-----------------------------------------------------
  Endpoints:
    title: Endpoints Response
    properties:
      deployedEndpoints:
        description: |
          The end points which has been deployed in the gateway
        type: array
        items:
          type: string
          example: "<endpoint xmlns=\"http://ws.apache.org/ns/synapse\" name=\"PizzaShackAPI--v1.0.0_APIproductionEndpoint\"><http uri-template=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"><timeout><responseAction>fault<\/responseAction><\/timeout><\/http><property name=\"ENDPOINT_ADDRESS\" value=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"/><\/endpoint>"
      UnDeployedEndpoints:
        description: |
          The end points which has not been deployed in the gateway
        type: array
        items:
          type: string
          example: "<endpoint xmlns=\"http://ws.apache.org/ns/synapse\" name=\"PizzaShackAPI--v1.0.0_APIproductionEndpoint\"><http uri-template=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"><timeout><responseAction>fault</responseAction></timeout></http><property name=\"ENDPOINT_ADDRESS\" value=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"/></endpoint>"

  #-----------------------------------------------------
  # The Sequence response resource
  #-----------------------------------------------------
  Sequences:
    title: Sequences Response
    properties:
      deployedSequences:
        description: |
          The sequences which has been deployed in the gateway
        type: array
        items:
          type: string
          example: "<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"PizzaShackAPI--v1.0.0_APIproductionEndpoint\"><http uri-template=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"><timeout><responseAction>fault</responseAction></timeout></http><property name=\"ENDPOINT_ADDRESS\" value=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"/></sequnce>"
      UnDeployedSequences:
        description: |
          The sequences which has not been deployed in the gateway
        type: array
        items:
          type: string
          example: "<sequence xmlns=\"http://ws.apache.org/ns/synapse\" name=\"PizzaShackAPI--v1.0.0_APIproductionEndpoint\"><http uri-template=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"><timeout><responseAction>fault</responseAction></timeout></http><property name=\"ENDPOINT_ADDRESS\" value=\"https://localhost:9443/am/sample/pizzashack/v1/api/\"/></sequnce>"

  #-----------------------------------------------------
  # The Local Entry response resource
  #-----------------------------------------------------
  LocalEntry:
    title: LocalEntry Response
    properties:
      deployedLocalEntries:
        description: |
          The local entries which has been deployed in the gateway
        type: array
        items:
          type : string
          example : "<localEntry xmlns=\"http://ws.apache.org/ns/synapse\" key=\"ga-config-key\" type=\"1\"><GoogleAnalyticsTracking xmlns=\"\">\n\t<!--Enable/Disable Google Analytics Tracking -->\n\t<Enabled>false</Enabled>\n\n\t<!-- Google Analytics Tracking ID -->\n\t<TrackingID>UA-XXXXXXXX-X</TrackingID>\n\n</GoogleAnalyticsTracking></localEntry>"
      UnDeployedLocalEntries:
        description: |
          The local entries which has not been deployed in the gateway
        type: array
        items:
          type : string
          example: "<localEntry xmlns=\"http://ws.apache.org/ns/synapse\" key=\"ga-config-key\" type=\"1\"><GoogleAnalyticsTracking xmlns=\"\">\n\t<!--Enable/Disable Google Analytics Tracking -->\n\t<Enabled>false</Enabled>\n\n\t<!-- Google Analytics Tracking ID -->\n\t<TrackingID>UA-XXXXXXXX-X</TrackingID>\n\n</GoogleAnalyticsTracking></localEntry>"

  #-----------------------------------------------------
  # The API Artifact response resource
  #-----------------------------------------------------
  APIArtifact:
    title: API Artifact Response
    properties:
      count:
        type: integer
        description: |
          Number of Artifacts Returned
        example: 1
      endpoints:
        $ref: '#/definitions/Endpoints'
      localEntries:
        $ref: '#/definitions/LocalEntry'
      sequences:
        $ref: '#/definitions/Sequences'

  #-----------------------------------------------------
  # The Error resource
  #-----------------------------------------------------
  Error:
    title: Error object returned with 4XX HTTP status
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int64
        description: Error code
      message:
        type: string
        description: Error message.
      description:
        type: string
        description: |
          A detail description about the error message.
      moreInfo:
        type: string
        description: |
          Preferably an url with more details about the error.
      error:
        type: array
        description: |
          If there are more than one error list them out.
          For example, list out validation errors by each field.
        items:
          $ref: '#/definitions/ErrorListItem'

  #-----------------------------------------------------
  # The Error List Item resource
  #-----------------------------------------------------
  ErrorListItem:
    title: Description of individual errors that may have occurred during a request.
    required:
      - code
      - message
    properties:
      code:
        type: string
        description: Error code
      message:
        type: string
        description: |
          Description about individual errors occurred

#-----------------------------------------------------
# END-OF-FILE
#-----------------------------------------------------
