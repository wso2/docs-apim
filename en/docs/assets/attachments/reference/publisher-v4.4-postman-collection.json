{
	"info": {
		"_postman_id": "47e02692-fa26-4b46-9f25-ad1190ea94e5",
		"name": "WSO2 API Manager 4.6.0 - Publisher REST API",
		"description": "This document specifies a **RESTful API** for WSO2 **API Manager - Publisher REST API** .\nIt is written with [OAS 3.0](http://swagger.io/).\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "40371634"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register DCR App",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"var clientId = response.clientId;",
									"var clientSecret = response.clientSecret;",
									"pm.collectionVariables.set(\"dcrClientId\", clientId);",
									"pm.collectionVariables.set(\"dcrClientSecret\", clientSecret);",
									"",
									"var base64EncodedCredentials = btoa(clientId + \":\" + clientSecret);",
									"pm.collectionVariables.set(\"base64EncodedDCRCredentials\", base64EncodedCredentials);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": {
								"username": "admin",
								"password": "admin",
								"showPassword": false
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n  \"callbackUrl\":\"www.google.lk\",\n  \"clientName\":\"rest_api_publisher\",\n  \"owner\":\"admin\",\n  \"grantType\":\"client_credentials password refresh_token\",\n  \"saasApp\":true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{dcrEndpoint}}"
					},
					"response": []
				},
				{
					"name": "Generate Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(responseBody);",
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"access-token\", response.access_token);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var url = pm.collectionVariables.get(\"basepath\").concat(\"/settings\");",
									"console.log(url);",
									"var getRequest = {",
									" url: url,",
									" method: 'GET',",
									"};",
									" ",
									"pm.sendRequest(getRequest, (error, response) => {",
									" if (error == null) {",
									"     if (response == null) {",
									"       //use existing scopes list",
									"     } else {",
									"         var scopeslist = response.json().scopes;",
									"         var scopeString = scopeslist.toString();",
									"         var scopeArr = scopeString.split(\",\");",
									"         var scopes = scopeArr.join(\" \");",
									"         pm.collectionVariables.set(\"restAPIScopes\", scopes);",
									"     }",
									" }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{base64EncodedDCRCredentials}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"grant_type\": \"password\",\n\"username\":\"admin\",\n\"password\":\"admin\",\n\"scope\":\"apim:api_view apim:api_create apim:api_manage apim:api_delete apim:api_publish apim:subscription_view apim:subscription_block apim:subscription_manage apim:external_services_discover apim:threat_protection_policy_create apim:threat_protection_policy_manage apim:document_create apim:document_manage apim:mediation_policy_view apim:mediation_policy_create apim:mediation_policy_manage apim:client_certificates_view apim:client_certificates_add apim:client_certificates_update apim:ep_certificates_view apim:ep_certificates_add apim:ep_certificates_update apim:publisher_settings apim:pub_alert_manage apim:shared_scope_manage apim:app_import_export apim:api_import_export apim:api_product_import_export apim:api_generate_key apim:common_operation_policy_view apim:common_operation_policy_manage apim:comment_write apim:comment_view apim:admin apim:subscription_approval_view apim:subscription_approval_manage apim:llm_provider_read apim:mcp_server_list_view apim:mcp_server_import_export apim:mcp_server_manage apim:mcp_server_view apim:mcp_server_create apim:mcp_server_manage\"\n}"
						},
						"url": "{{tokenEndpoint}}"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "API Design Assistant",
			"item": [
				{
					"name": "Generate API Specifications with API Design Assistant",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Create an API for a banking transaction\",\n  \"sessionId\": \"YzIyZjY1NTYtZWQ4Ni00ZjY5LThhY2EtNWJhMjcxYzAwYjhmLTIwMjUtMDktMTBUMTc6Mzg6MjguMDcxWg==\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/design-assistant/chat",
						"description": "Generates API specifications based on natural language input.\n\nKey features:\n- Converts text descriptions into structured API specifications\n- Supports session-based API generation\n- Provides QoS suggestions and other improvements\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "APIs",
			"item": [
				{
					"name": "Retrieve/Search APIs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis"
					},
					"response": []
				},
				{
					"name": "Create a new API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"apiId\", response.id);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{sampleRestAPIPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis"
					},
					"response": []
				},
				{
					"name": "Get Details of an API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}"
					},
					"response": []
				},
				{
					"name": "Import an OpenAPI Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"apiIdToDelete\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "url",
									"value": "https://petstore3.swagger.io/api/v3/openapi.json",
									"type": "text"
								},
								{
									"key": "additionalProperties",
									"value": "{\n   \"name\":\"SwaggerPetstore-OpenAPI30\",\n   \"version\":\"1.0.5\",\n   \"context\":\"test\",\n   \"endpointConfig\":{\n      \"endpoint_type\":\"http\",\n      \"sandbox_endpoints\":{\n         \"url\":\"https://localhost:9443/am/sample/pizzashack/v1/api/\"\n      },\n      \"production_endpoints\":{\n         \"url\":\"https://localhost:9443/am/sample/pizzashack/v1/api/\"\n      }\n   }\n}",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/import-openapi"
					},
					"response": []
				},
				{
					"name": "Delete an API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/apis/{{apiIdToDelete}}"
					},
					"response": []
				},
				{
					"name": "Update an API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{sampleRestAPIPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}"
					},
					"response": []
				},
				{
					"name": "Get API Swagger Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{basepath}}/apis/{{apiId}}/swagger"
					},
					"response": []
				},
				{
					"name": "Update Swagger Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "url",
									"value": "https://petstore3.swagger.io/api/v3/openapi.json",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/{{apiId}}/swagger"
					},
					"response": []
				},
				{
					"name": "Generate Mock Response Payloads",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/generate-mock-scripts"
					},
					"response": []
				},
				{
					"name": "Fetch Generated Mock Response Payloads",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/generated-mock-scripts"
					},
					"response": []
				},
				{
					"name": "Update Topic",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"count\": 1,\n  \"list\": [\n    {\n      \"name\": \"PizzaShackAPI\",\n      \"mode\": \"Pizza\",\n      \"description\": \"Pizza Shack store.\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/topics"
					},
					"response": []
				},
				{
					"name": "Upload a Thumbnail Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/wso2/Pictures/Personal/minions.jpg"
								}
							]
						},
						"url": "{{basepath}}/apis/{{apiId}}/thumbnail"
					},
					"response": []
				},
				{
					"name": "Get Thumbnail Image",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/thumbnail"
					},
					"response": []
				},
				{
					"name": "Get Details of Subscription Throttling Policies of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/subscription-policies"
					},
					"response": []
				},
				{
					"name": "Create a New API Version",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basepath}}/apis/copy-api?newVersion={{newVersion}}&defaultVersion={{isDefaultVersion}}&apiId={{apiId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"copy-api"
							],
							"query": [
								{
									"key": "newVersion",
									"value": "{{newVersion}}"
								},
								{
									"key": "defaultVersion",
									"value": "{{isDefaultVersion}}"
								},
								{
									"key": "apiId",
									"value": "{{apiId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import a WSDL Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"wsdlApiId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "url",
									"value": "https://ws.cdyne.com/phoneverify/phoneverify.asmx?WSDL",
									"type": "text"
								},
								{
									"key": "additionalProperties",
									"value": "{\n   \"name\":\"PhoneVerify\",\n   \"version\":\"1.0.5\",\n   \"context\":\"phone\",\n   \"endpointConfig\":{\n      \"endpoint_type\":\"http\",\n      \"sandbox_endpoints\":{\n         \"url\":\"https://ws.cdyne.com/phoneverify/phoneverify.asmx\"\n      },\n      \"production_endpoints\":{\n         \"url\":\"https://ws.cdyne.com/phoneverify/phoneverify.asmx\"\n      }\n   }\n}",
									"type": "text"
								},
								{
									"key": "implementationType",
									"value": "SOAPTOREST",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/import-wsdl"
					},
					"response": []
				},
				{
					"name": "Get WSDL Meta Informtation",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{wsdlApiId}}/wsdl-info"
					},
					"response": []
				},
				{
					"name": "Get WSDL Definition",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{wsdlApiId}}/wsdl"
					},
					"response": []
				},
				{
					"name": "Update WSDL Definition",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "url",
									"value": "http://ws.cdyne.com/phoneverify/phoneverify.asmx?WSDL",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/{{wsdlApiId}}/wsdl"
					},
					"response": []
				},
				{
					"name": "Import GraphQL Schema Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"graphqlApiId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "url",
									"value": "https://raw.githubusercontent.com/graphql/swapi-graphql/master/schema.graphql",
									"type": "text",
									"disabled": true
								},
								{
									"key": "additionalProperties",
									"value": "{\n   \"name\":\"Starwars\",\n   \"version\":\"1.0.5\",\n   \"context\":\"phone\",\n   \"endpointConfig\":{\n      \"endpoint_type\":\"http\",\n      \"sandbox_endpoints\":{\n         \"url\":\"starwars/v1\"\n      },\n      \"production_endpoints\":{\n         \"url\":\"starwars/v1\"\n      }\n   }\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/home/wso2/Documents/Peer Test artifacts/test-artifacts/test-artifacts/schema_graphql.graphql"
								}
							]
						},
						"url": "{{basepath}}/apis/import-graphql-schema"
					},
					"response": []
				},
				{
					"name": "Get Resource Paths of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/resource-paths"
					},
					"response": []
				},
				{
					"name": "Import AsyncAPI Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"asyncApiId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/wso2/Downloads/streetlights.yml",
									"disabled": true
								},
								{
									"key": "additionalProperties",
									"value": "{\"name\":\"StreetlightsAPI\",\"version\":\"1.0.0\",\"context\":\"lights\",\"type\":\"WEBSUB\",\"gatewayVendor\":\"wso2\"}",
									"type": "text"
								},
								{
									"key": "url",
									"value": "https://raw.githubusercontent.com/ab510/asyncapi/master/examples/2.0.0/streetlights.yml",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/import-asyncapi"
					},
					"response": []
				},
				{
					"name": "Get AsyncAPI Definition",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{asyncApiId}}/asyncapi"
					},
					"response": []
				},
				{
					"name": "Update AsyncAPI Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"asyncApiId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/wso2/Downloads/streetlights.yml",
									"disabled": true
								},
								{
									"key": "additionalProperties",
									"value": "{\"name\":\"StreetlightsAPI\",\"version\":\"1.0.0\",\"context\":\"lights\",\"type\":\"WEBSUB\",\"gatewayVendor\":\"wso2\"}",
									"type": "text",
									"disabled": true
								},
								{
									"key": "url",
									"value": "https://raw.githubusercontent.com/ab510/asyncapi/master/examples/2.0.0/streetlights.yml",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/{{asyncApiId}}/asyncapi"
					},
					"response": []
				},
				{
					"name": "Generate Internal API Key",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": "{{basepath}}/apis/{{apiId}}/generate-key"
					},
					"response": []
				},
				{
					"name": "Get Sequence of Custom Backend",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/sequence-backend/:type/content",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"sequence-backend",
								":type",
								"content"
							],
							"variable": [
								{
									"key": "type",
									"value": "",
									"description": "(Required)  Type of the Endpoint.\nSANDBOX or PRODUCTION"
								}
							]
						},
						"description": "This operation can be used to get Sequence of the Custom Backend"
					},
					"response": []
				},
				{
					"name": "Delete Sequence Backend of the API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/sequence-backend/:type",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"sequence-backend",
								":type"
							],
							"variable": [
								{
									"key": "type",
									"value": "",
									"description": "(Required) Type of the Endpoint.\nSANDBOX or PRODUCTION"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sequence Backends of the API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": "{{basepath}}/apis/{{apiId}}/sequence-backend"
					},
					"response": []
				},
				{
					"name": "Upload Sequence Sequence as the Endpoint of the API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "sequence",
									"description": "The sequence that needs to be uploaded.",
									"type": "file",
									"src": []
								},
								{
									"key": "type",
									"value": "",
									"description": "Type of the Endpoint",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/{{apiId}}/sequence-backend"
					},
					"response": []
				},
				{
					"name": "Retrieve MCP Server(s) that uses the given API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/apis/{{apiId}}/mcp-servers-usage",
						"description": "This operation can be used to retrieve/identify MCP Server(s) that uses the API given by the `apiId` parameter.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Resource Policies",
			"item": [
				{
					"name": "Get Conversion Policy Definitions of API",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"resourcePolicyId\", response.list[0].id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basepath}}/apis/{{wsdlApiId}}/resource-policies?resourcePath={{resourcePath}}&verb={{verb}}&sequenceType={{sequenceType}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{wsdlApiId}}",
								"resource-policies"
							],
							"query": [
								{
									"key": "resourcePath",
									"value": "{{resourcePath}}"
								},
								{
									"key": "verb",
									"value": "{{verb}}"
								},
								{
									"key": "sequenceType",
									"value": "{{sequenceType}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Resource Policy (inflow/outflow) Definition by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{wsdlApiId}}/resource-policies/{{resourcePolicyId}}"
					},
					"response": []
				},
				{
					"name": "Update Resource Policy(inflow/outflow) Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"httpVerb\": \"post\",\n    \"resourcePath\": \"checkPhoneNumber\",\n    \"content\": \"<header description=\\\"SOAPAction\\\" name=\\\"SOAPAction\\\" scope=\\\"transport\\\" value=\\\"http://ws.cdyne.com/PhoneVerify/query/CheckPhoneNumber\\\"/>\\n<property name=\\\"REST_URL_POSTFIX\\\" scope=\\\"axis2\\\" action=\\\"remove\\\"/>\\n<property expression=\\\"json-eval($.CheckPhoneNumber.LicenseKey)\\\" name=\\\"req.var.CheckPhoneNumber.LicenseKey\\\"/>\\n<property expression=\\\"json-eval($.CheckPhoneNumber.PhoneNumber)\\\" name=\\\"req.var.CheckPhoneNumber.PhoneNumber\\\"/>\\n\\n\\n<payloadFactory description=\\\"transform\\\" media-type=\\\"xml\\\">\\n  <format>\\n  <soapenv:Envelope xmlns:soapenv=\\\"http://www.w3.org/2003/05/soap-envelope\\\" xmlns:web=\\\"http://ws.cdyne.com/PhoneVerify/query\\\">\\n  <soapenv:Header/>\\n  <soapenv:Body>\\n  \\t<web:CheckPhoneNumber xmlns:web=\\\"http://ws.cdyne.com/PhoneVerify/query\\\">\\n  <web:LicenseKey>$1</web:LicenseKey>\\n  <web:PhoneNumber>$2</web:PhoneNumber>\\n</web:CheckPhoneNumber>\\n\\n  </soapenv:Body>\\n  </soapenv:Envelope>\\n  </format>\\n  <args>\\n \\t<arg evaluator=\\\"xml\\\" expression=\\\"get-property('req.var.CheckPhoneNumber.LicenseKey')\\\"/>\\n<arg evaluator=\\\"xml\\\" expression=\\\"get-property('req.var.CheckPhoneNumber.PhoneNumber')\\\"/>\\n\\n  </args>\\n</payloadFactory>\\n<property description=\\\"messageProperty\\\" name=\\\"messageType\\\" scope=\\\"axis2\\\" type=\\\"STRING\\\" value=\\\"application/soap+xml\\\"/>\\n\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{wsdlApiId}}/resource-policies/{{resourcePolicyId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Revisions",
			"item": [
				{
					"name": "List Revisions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/revisions"
					},
					"response": []
				},
				{
					"name": "Create API Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"revisionId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"description\": \"removed a post resource\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/revisions"
					},
					"response": []
				},
				{
					"name": "Delete Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/revisions/{{revisionId}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/revisions/{{revisionId}}"
					},
					"response": []
				},
				{
					"name": "Get Deployments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/deployments"
					},
					"response": []
				},
				{
					"name": "Deploy Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Default\",\n        \"vhost\": \"localhost\",\n        \"displayOnDevportal\": true\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/deploy-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"deploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Undeploy Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\"name\": \"Default\", \"displayOnDevportal\": false}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/undeploy-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"undeploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Restore Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/restore-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"restore-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update deployment devportal visibility",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Default\",\n\"vhost\": \"localhost\",\n\"displayOnDevportal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/deployments/{{deploymentId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Lifecycle",
			"item": [
				{
					"name": "Change API Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basepath}}/apis/change-lifecycle?action={{action}}&lifecycleChecklist={{lifecycleChecklist}}&apiId={{apiId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"change-lifecycle"
							],
							"query": [
								{
									"key": "action",
									"value": "{{action}}"
								},
								{
									"key": "lifecycleChecklist",
									"value": "{{lifecycleChecklist}}"
								},
								{
									"key": "apiId",
									"value": "{{apiId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Lifecycle State Change History of the API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/lifecycle-history"
					},
					"response": []
				},
				{
					"name": "Get Lifecycle State Data of the API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/lifecycle-state"
					},
					"response": []
				},
				{
					"name": "Delete Pending Lifecycle State Change Tasks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/lifecycle-state/pending-tasks"
					},
					"response": []
				}
			]
		},
		{
			"name": "GraphQL Schema (Individual)",
			"item": [
				{
					"name": "Get the Schema of a GraphQL API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{graphqlApiId}}/graphql-schema"
					},
					"response": []
				}
			]
		},
		{
			"name": "GraphQL Schema",
			"item": [
				{
					"name": "Add a Schema to a GraphQL API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "schemaDefinition",
									"type": "file",
									"src": "/home/wso2/Documents/Peer Test artifacts/test-artifacts/test-artifacts/schema_graphql.graphql"
								}
							]
						},
						"url": "{{basepath}}/apis/{{graphqlApiId}}/graphql-schema"
					},
					"response": []
				}
			]
		},
		{
			"name": "AWS Lambda (Individual)",
			"item": [
				{
					"name": "Retrieve the ARNs of AWS Lambda Functions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/amznResourceNames"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Documents",
			"item": [
				{
					"name": "Get API Documents of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/documents"
					},
					"response": []
				},
				{
					"name": "Add a New Document to an API",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"documentId\", response.documentId);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"PizzaShackDoc\",\n\"type\": \"HOWTO\",\n\"summary\": \"Summary of PizzaShack API Documentation\",\n\"sourceType\": \"INLINE\",\n\"sourceUrl\": \"\",\n\"fileName\": \"\",\n\"inlineContent\": \"This is doc content. This can have many lines.\",\n\"otherTypeName\": \"\",\n\"visibility\": \"API_LEVEL\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/documents"
					},
					"response": []
				},
				{
					"name": "Get a Document of an API",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"apiDocName\", response.name);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access-token}}",
								"type": "text"
							}
						],
						"url": "{{basepath}}/apis/{{apiId}}/documents/{{documentId}}"
					},
					"response": []
				},
				{
					"name": "Update a Document of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"CalculatorDoc\",\n\"type\": \"HOWTO\",\n\"summary\": \"Modified Summary of Calculator Documentation\",\n\"sourceType\": \"INLINE\",\n\"sourceUrl\": \"\",\n\"fileName\": \"\",\n\"inlineContent\": \"This is doc content. This can have many lines. Modified.\",\n\"otherTypeName\": \"\",\n\"visibility\": \"API_LEVEL\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/documents/{{documentId}}"
					},
					"response": []
				},
				{
					"name": "Upload the Content of an API Document",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "inlineContent",
									"value": "This is a sample inline content for a document.",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/{{apiId}}/documents/{{documentId}}/content"
					},
					"response": []
				},
				{
					"name": "Get the Content of an API Document",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/documents/{{documentId}}/content"
					},
					"response": []
				},
				{
					"name": "Check whether a Document with the Provided Name Exist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/documents/validate?name={{apiDocName}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"documents",
								"validate"
							],
							"query": [
								{
									"key": "name",
									"value": "{{apiDocName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a Document of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/documents/{{documentId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Operation Policies",
			"item": [
				{
					"name": "Get All Operation Policies of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/operation-policies"
					},
					"response": []
				},
				{
					"name": "Add an API Specific Operation Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"operationPolicyId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "policySpecFile",
									"type": "file",
									"src": "/home/wso2/Downloads/SampleExchange.xml"
								},
								{
									"key": "type",
									"value": "in",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/{{apiId}}/operation-policies"
					},
					"response": []
				},
				{
					"name": "Get an API Specific Operation Policy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/operation-policies/{{operationPolicyId}}"
					},
					"response": []
				},
				{
					"name": "Download an API Specific Operation Policy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/operation-policies/{{operationPolicyId}}/content"
					},
					"response": []
				},
				{
					"name": "Delete an API Specific Operation Policy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/operation-policies/{{operationPolicyId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Add an API Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"commentId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"content\": \"This is a comment\",\n\"category\": \"general\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/comments"
					},
					"response": []
				},
				{
					"name": "Retrieve API Comments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/comments"
					},
					"response": []
				},
				{
					"name": "Retrieve an API Comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"content\": \"This is an updated comment\",\n\"category\": \"general\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/comments/{{commentId}}"
					},
					"response": []
				},
				{
					"name": "Get Details of an API Comment Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/comments/{{commentId}}"
					},
					"response": []
				},
				{
					"name": "Get Replies to a Comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/comments/{{commentId}}/replies"
					},
					"response": []
				},
				{
					"name": "Delete an API Comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/comments/{{commentId}}"
					},
					"response": []
				},
				{
					"name": "Retrieve MCP Server Comments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "X-WSO2-Tenant",
								"value": "carbon.super",
								"description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/comments?limit=25&offset=0&includeCommenterInfo=false",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"comments"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Maximum size of resource array to return.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Starting point within the complete list of items qualified.\n"
								},
								{
									"key": "includeCommenterInfo",
									"value": "false",
									"description": "Whether we need to display commentor details.\n"
								}
							]
						},
						"description": "Get a list of Comments that are already added to MCP Server\n"
					},
					"response": []
				},
				{
					"name": "Add an MCP Server Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"commentId\", response.id);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"This is a comment\",\n  \"category\": \"general\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/comments",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"comments"
							],
							"query": [
								{
									"key": "replyTo",
									"value": "string",
									"description": "ID of the perent comment.\n",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit a comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"content\": \"This is a comment 32000\",\n  \"category\": \"general\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/comments/{{commentId}}",
						"description": "Edit the individual comment\n"
					},
					"response": []
				},
				{
					"name": "Delete a MCP Server Comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/comments/{{commentId}}",
						"description": "Remove a Comment\n"
					},
					"response": []
				},
				{
					"name": "Get replies of a comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "X-WSO2-Tenant",
								"value": "carbon.super",
								"description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n"
							},
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/comments/{{commentId}}/replies?limit=25&offset=0&includeCommenterInfo=false",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"comments",
								"{{commentId}}",
								"replies"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Maximum size of resource array to return.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Starting point within the complete list of items qualified.\n"
								},
								{
									"key": "includeCommenterInfo",
									"value": "false",
									"description": "Whether we need to display commentor details.\n"
								}
							]
						},
						"description": "Get replies of a comment\n"
					},
					"response": []
				},
				{
					"name": "Get Details of an API Comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "X-WSO2-Tenant",
								"value": "carbon.super",
								"description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n"
							},
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/comments/{{commentId}}?includeCommenterInfo=false&replyLimit=25&replyOffset=0",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"comments",
								"{{commentId}}"
							],
							"query": [
								{
									"key": "includeCommenterInfo",
									"value": "false",
									"description": "Whether we need to display commentor details.\n"
								},
								{
									"key": "replyLimit",
									"value": "25",
									"description": "Maximum size of replies array to return.\n"
								},
								{
									"key": "replyOffset",
									"value": "0",
									"description": "Starting point within the complete list of replies.\n"
								}
							]
						},
						"description": "Get the individual comment given by a username for a certain MCP Server.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Common Operation Policies",
			"item": [
				{
					"name": "Get All Operation Policies",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/operation-policies"
					},
					"response": []
				},
				{
					"name": "Add an Operation Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"operationPolicyId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "policySpecFile",
									"type": "file",
									"src": "/home/wso2/Downloads/SampleExchange.xml"
								},
								{
									"key": "type",
									"value": "in",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/operation-policies"
					},
					"response": []
				},
				{
					"name": "Get an Operation Policy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/operation-policies/{{operationPolicyId}}"
					},
					"response": []
				},
				{
					"name": "Download an Operation Policy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/operation-policies/{{operationPolicyId}}/content"
					},
					"response": []
				},
				{
					"name": "Delete an Operation Policy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/operation-policies/{{operationPolicyId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "GraphQL Policies",
			"item": [
				{
					"name": "/apis/{apiId}/graphql-policies/complexity/types GET",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{graphqlApiId}}/graphql-policies/complexity/types"
					},
					"response": []
				},
				{
					"name": "/apis/{apiId}/graphql-policies/complexity PUT",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"list\": [\n    {\n      \"type\": \"Country\",\n      \"field\": \"name\",\n      \"complexityValue\": 1\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{graphqlApiId}}/graphql-policies/complexity"
					},
					"response": []
				},
				{
					"name": "/apis/{apiId}/graphql-policies/complexity GET",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{graphqlApiId}}/graphql-policies/complexity"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Audit",
			"item": [
				{
					"name": "Retrieve the Security Audit Report of the Audit API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/auditapi"
					},
					"response": []
				}
			]
		},
		{
			"name": "External DevPortals",
			"item": [
				{
					"name": "Retrieve List of External DevPortals",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/external-stores"
					},
					"response": []
				},
				{
					"name": "Get the List of External DevPortals to which the API is Published",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/external-stores"
					},
					"response": []
				},
				{
					"name": "Publish an API to External DevPortals",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/publish-to-external-stores?externalStoreIds={{externalDevPortalIds}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"publish-to-external-stores"
							],
							"query": [
								{
									"key": "externalStoreIds",
									"value": "{{externalDevPortalIds}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API Products",
			"item": [
				{
					"name": "Retrieve/Search API Products",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products"
					},
					"response": []
				},
				{
					"name": "Create a New API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"apiProductId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackAPIProduct\",\n  \"context\": \"pizzaproduct\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store\",\n  \"provider\": \"admin\",\n  \"hasThumbnail\": false,\n  \"state\": \"PUBLISHED\",\n  \"enableSchemaValidation\": false,\n  \"isRevision\": false,\n  \"revisionId\": 1,\n  \"responseCachingEnabled\": true,\n  \"cacheTimeout\": 300,\n  \"visibility\": \"PUBLIC\",\n  \"visibleRoles\": [],\n  \"visibleTenants\": [],\n  \"accessControl\": \"NONE\",\n  \"accessControlRoles\": [],\n  \"apiType\": \"APIPRODUCT\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\",\n    \"food\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"apiThrottlingPolicy\": \"Unlimited\",\n  \"authorizationHeader\": \"Authorization\",\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"subscriptionAvailability\": \"CURRENT_TENANT\",\n  \"subscriptionAvailableTenants\": [],\n  \"additionalProperties\": [\n    {\n      \"name\": \"string\",\n      \"value\": \"string\",\n      \"display\": true\n    }\n  ],\n  \"monetization\": {\n    \"enabled\": true,\n    \"properties\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    }\n  },\n  \"businessInformation\": {\n    \"businessOwner\": \"businessowner\",\n    \"businessOwnerEmail\": \"businessowner@wso2.com\",\n    \"technicalOwner\": \"technicalowner\",\n    \"technicalOwnerEmail\": \"technicalowner@wso2.com\"\n  },\n  \"corsConfiguration\": {\n    \"corsConfigurationEnabled\": false,\n    \"accessControlAllowOrigins\": [\n      \"string\"\n    ],\n    \"accessControlAllowCredentials\": false,\n    \"accessControlAllowHeaders\": [\n      \"string\"\n    ],\n    \"accessControlAllowMethods\": [\n      \"string\"\n    ]\n  },\n  \"createdTime\": \"string\",\n  \"lastUpdatedTime\": \"string\",\n  \"apis\": [\n    {\n      \"name\": \"PizzaShackAPI\",\n      \"apiId\": \"{{apiId}}\",\n      \"version\": \"1.0.0\",\n      \"operations\": [\n        {\n          \"target\": \"/menu\",\n          \"verb\": \"GET\",\n          \"authType\": \"Application & Application User\",\n          \"throttlingPolicy\": \"Unlimited\"\n        }\n      ]\n    }\n  ],\n  \"scopes\": [],\n  \"categories\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/api-products"
					},
					"response": []
				},
				{
					"name": "Get Details of an API Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}"
					},
					"response": []
				},
				{
					"name": "Update an API product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackAPIProduct\",\n  \"context\": \"pizzaproduct\",\n  \"description\": \"This is a simple API for Pizza Shack online pizza delivery store\",\n  \"provider\": \"admin\",\n  \"hasThumbnail\": false,\n  \"state\": \"PUBLISHED\",\n  \"enableSchemaValidation\": false,\n  \"isRevision\": false,\n  \"revisionId\": 1,\n  \"responseCachingEnabled\": true,\n  \"cacheTimeout\": 300,\n  \"visibility\": \"PUBLIC\",\n  \"visibleRoles\": [],\n  \"visibleTenants\": [],\n  \"accessControl\": \"NONE\",\n  \"accessControlRoles\": [],\n  \"apiType\": \"APIPRODUCT\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"pizza\",\n    \"food\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"apiThrottlingPolicy\": \"Unlimited\",\n  \"authorizationHeader\": \"Authorization\",\n  \"securityScheme\": [\n    \"oauth2\"\n  ],\n  \"subscriptionAvailability\": \"CURRENT_TENANT\",\n  \"subscriptionAvailableTenants\": [],\n  \"additionalProperties\": [\n    {\n      \"name\": \"string\",\n      \"value\": \"string\",\n      \"display\": true\n    }\n  ],\n  \"monetization\": {\n    \"enabled\": true,\n    \"properties\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    }\n  },\n  \"businessInformation\": {\n    \"businessOwner\": \"businessowner\",\n    \"businessOwnerEmail\": \"businessowner@wso2.com\",\n    \"technicalOwner\": \"technicalowner\",\n    \"technicalOwnerEmail\": \"technicalowner@wso2.com\"\n  },\n  \"corsConfiguration\": {\n    \"corsConfigurationEnabled\": false,\n    \"accessControlAllowOrigins\": [\n      \"string\"\n    ],\n    \"accessControlAllowCredentials\": false,\n    \"accessControlAllowHeaders\": [\n      \"string\"\n    ],\n    \"accessControlAllowMethods\": [\n      \"string\"\n    ]\n  },\n  \"createdTime\": \"string\",\n  \"lastUpdatedTime\": \"string\",\n  \"apis\": [\n    {\n      \"name\": \"PizzaShackAPI\",\n      \"apiId\": \"{{apiId}}\",\n      \"version\": \"1.0.0\",\n      \"operations\": [\n        {\n          \"target\": \"/menu\",\n          \"verb\": \"GET\",\n          \"authType\": \"Application & Application User\",\n          \"throttlingPolicy\": \"Unlimited\"\n        }\n      ]\n    }\n  ],\n  \"scopes\": [],\n  \"categories\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/api-products/{{apiProductId}}"
					},
					"response": []
				},
				{
					"name": "Get API Product Thumbnail Image",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/thumbnail"
					},
					"response": []
				},
				{
					"name": "Upload a Thumbnail Image",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/wso2/Pictures/Personal/minions.jpg"
								}
							]
						},
						"url": "{{basepath}}/api-products/{{apiProductId}}/thumbnail"
					},
					"response": []
				},
				{
					"name": "Get Swagger Definition of API Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/swagger"
					},
					"response": []
				},
				{
					"name": "Check Whether API Product is Outdated",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/is-outdated"
					},
					"response": []
				},
				{
					"name": "Delete an API Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Product Documents",
			"item": [
				{
					"name": "Get a List of API Product Documents",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/documents"
					},
					"response": []
				},
				{
					"name": "Add a New Document to an API Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"productDocumentId\", response.documentId);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"CalculatorDoc\",\n  \"type\": \"HOWTO\",\n  \"summary\": \"Summary of Calculator Documentation\",\n  \"sourceType\": \"INLINE\",\n  \"sourceUrl\": \"\",\n  \"fileName\": \"\",\n  \"inlineContent\": \"This is doc content. This can have many lines.\",\n  \"otherTypeName\": \"\",\n  \"visibility\": \"API_LEVEL\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/api-products/{{apiProductId}}/documents"
					},
					"response": []
				},
				{
					"name": "Get a Document of an API Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/documents/{{productDocumentId}}"
					},
					"response": []
				},
				{
					"name": "Update a Document of an API Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"CalculatorDoc\",\n  \"type\": \"HOWTO\",\n  \"summary\": \"Modified Summary of Calculator Documentation\",\n  \"sourceType\": \"INLINE\",\n  \"sourceUrl\": \"\",\n  \"fileName\": \"\",\n  \"inlineContent\": \"This is modified doc content. This can have many lines.\",\n  \"otherTypeName\": \"\",\n  \"visibility\": \"API_LEVEL\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/api-products/{{apiProductId}}/documents/{{productDocumentId}}"
					},
					"response": []
				},
				{
					"name": "Upload Content to an API Product Document",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "inlineContent",
									"value": " This is API Product document's inline content.",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/api-products/{{apiProductId}}/documents/{{productDocumentId}}/content"
					},
					"response": []
				},
				{
					"name": "Get the Content of an API Product Document",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/documents/{{productDocumentId}}/content"
					},
					"response": []
				},
				{
					"name": "Delete a Document of an API Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/documents/{{productDocumentId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Product Revisions",
			"item": [
				{
					"name": "List Revisions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/revisions"
					},
					"response": []
				},
				{
					"name": "Create API Product Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"revisionId\", response.id);"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"description\": \"removed a post resource\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/api-products/{{apiProductId}}/revisions"
					},
					"response": []
				},
				{
					"name": "Delete Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/revisions/{{revisionId}}"
					},
					"response": []
				},
				{
					"name": "Retrieve Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/revisions/{{revisionId}}"
					},
					"response": []
				},
				{
					"name": "Get Deployments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/api-products/{{apiProductId}}/deployments"
					},
					"response": []
				},
				{
					"name": "Deploy Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Default\",\n        \"vhost\": \"localhost\",\n        \"displayOnDevportal\": true\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/api-products/{{apiProductId}}/deploy-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"api-products",
								"{{apiProductId}}",
								"deploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Undeploy Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\"name\": \"Default\", \"displayOnDevportal\": false}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/api-products/{{apiProductId}}/undeploy-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"api-products",
								"{{apiProductId}}",
								"undeploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Restore Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basepath}}/api-products/{{apiProductId}}/restore-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"api-products",
								"{{apiProductId}}",
								"restore-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update deployment devportal visibility",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"Default\",\n\"vhost\": \"localhost\",\n\"displayOnDevportal\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/api-products/{{apiProductId}}/deployments/{{deploymentId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": " Import Export",
			"item": [
				{
					"name": "Export an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basepath}}/apis/export?apiId={{apiId}}&name={{exportAPIName}}&version={{exportAPIVersion}}&provider={{exportAPIProvider}}&format={{exportAPIFormat}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"export"
							],
							"query": [
								{
									"key": "apiId",
									"value": "{{apiId}}"
								},
								{
									"key": "name",
									"value": "{{exportAPIName}}"
								},
								{
									"key": "version",
									"value": "{{exportAPIVersion}}"
								},
								{
									"key": "provider",
									"value": "{{exportAPIProvider}}"
								},
								{
									"key": "format",
									"value": "{{exportAPIFormat}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/wso2/Downloads/admin-PizzaShackAPI-1.0.0.zip"
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/apis/import?preserveProvider=false&overwrite=false",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"import"
							],
							"query": [
								{
									"key": "preserveProvider",
									"value": "false"
								},
								{
									"key": "overwrite",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Export an API Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basepath}}/api-products/export?name={{exportAPIProductName}}&version={{exportAPIProductVersion}}&provider={{exportAPIProductProvider}}&format={{exportAPIProductFormat}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"api-products",
								"export"
							],
							"query": [
								{
									"key": "name",
									"value": "{{exportAPIProductName}}"
								},
								{
									"key": "version",
									"value": "{{exportAPIProductVersion}}"
								},
								{
									"key": "provider",
									"value": "{{exportAPIProductProvider}}"
								},
								{
									"key": "format",
									"value": "{{exportAPIProductFormat}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Import an API Product",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/wso2/Downloads/admin-PizzaShackAPIProduct.zip"
								}
							]
						},
						"url": "{{basepath}}/api-products/import"
					},
					"response": []
				},
				{
					"name": "Import a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "(Required) Zip archive consisting on exported MCP Server configuration",
									"type": "file",
									"src": "postman-cloud:///1f0afd4e-31c3-46d0-9e33-a3caf1750f7b"
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/mcp-servers/import?preserveProvider=true&rotateRevision=true&overwrite=true&preservePortalConfigurations=true&dryRun=false",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"import"
							],
							"query": [
								{
									"key": "preserveProvider",
									"value": "true",
									"description": "Preserve Original Provider of the MCP server. This is the user choice to keep or replace the MCP server \nprovider\n"
								},
								{
									"key": "rotateRevision",
									"value": "true",
									"description": "Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision\n"
								},
								{
									"key": "overwrite",
									"value": "true",
									"description": "Whether to update the MCP server or not. This is used when updating already existing MCP servers\n"
								},
								{
									"key": "preservePortalConfigurations",
									"value": "true",
									"description": "Preserve Portal Configurations. This is used to preserve the portal configurations of the MCP server\n"
								},
								{
									"key": "dryRun",
									"value": "false",
									"description": "Dry Run. This is used to validate the MCP server without importing it\n"
								}
							]
						},
						"description": "This operation can be used to import a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Export a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/zip"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/export?mcpServerId={{mcpServerId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"export"
							],
							"query": [
								{
									"key": "mcpServerId",
									"value": "{{mcpServerId}}",
									"description": "UUID of the MCP server"
								},
								{
									"key": "name",
									"value": "string",
									"description": "API Name\n",
									"disabled": true
								},
								{
									"key": "version",
									"value": "string",
									"description": "Version of the MCP Server\n",
									"disabled": true
								},
								{
									"key": "revisionNumber",
									"value": "string",
									"description": "Revision number of the API artifact\n",
									"disabled": true
								},
								{
									"key": "providerName",
									"value": "string",
									"description": "Provider name of the MCP Server\n",
									"disabled": true
								},
								{
									"key": "format",
									"value": "JSON",
									"description": "Format of output documents. Can be YAML or JSON.\n",
									"disabled": true
								},
								{
									"key": "preserveStatus",
									"value": "true",
									"description": "Preserve MCP Server Status during export\n",
									"disabled": true
								},
								{
									"key": "latestRevision",
									"value": "false",
									"description": "Export the latest revision of the MCP server\n",
									"disabled": true
								},
								{
									"key": "gatewayEnvironment",
									"value": "string",
									"description": "Gateway environment of the exported MCP servers\n",
									"disabled": true
								},
								{
									"key": "preserveCredentials",
									"value": "true",
									"description": "Preserve endpoint configuration credentials\n",
									"disabled": true
								}
							]
						},
						"description": "This operation can be used to export the details of a particular MCP server as a zip file.\n"
					},
					"response": []
				},
				{
					"name": "Export an API Policy by its name and version",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/zip"
							}
						],
						"url": {
							"raw": "{{basepath}}/operation-policies/export?name=string&version=string",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"operation-policies",
								"export"
							],
							"query": [
								{
									"key": "name",
									"value": "string",
									"description": "Policy name"
								},
								{
									"key": "version",
									"value": "string",
									"description": "Version of the policy"
								},
								{
									"key": "format",
									"value": "string",
									"description": "Format of the policy definition file",
									"disabled": true
								}
							]
						},
						"description": "This operation provides you to export a preferred common API policy\n"
					},
					"response": []
				},
				{
					"name": "Import an API Policy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "(Required) Zip archive consisting on exported policy configuration",
									"type": "file",
									"src": []
								}
							]
						},
						"url": "{{basepath}}/operation-policies/import",
						"description": "This operation can be used to import an API Policy.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "Get all Subscriptions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basepath}}/subscriptions?apiId={{apiId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"subscriptions"
							],
							"query": [
								{
									"key": "apiId",
									"value": "{{apiId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Block a Subscription",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basepath}}/subscriptions/block-subscription?subscriptionId={{subscriptionId}}&blockState={{blockState}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"subscriptions",
								"block-subscription"
							],
							"query": [
								{
									"key": "subscriptionId",
									"value": "{{subscriptionId}}"
								},
								{
									"key": "blockState",
									"value": "{{blockState}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unblock a Subscription",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basepath}}/subscriptions/unblock-subscription?subscriptionId={{subscriptionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"subscriptions",
								"unblock-subscription"
							],
							"query": [
								{
									"key": "subscriptionId",
									"value": "{{subscriptionId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change subscription business plan",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{basepath}}/subscriptions/change-business-plan?subscriptionId=<string>&businessPlan=<string>",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"subscriptions",
								"change-business-plan"
							],
							"query": [
								{
									"key": "subscriptionId",
									"value": "<string>"
								},
								{
									"key": "businessPlan",
									"value": "<string>"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriber",
			"item": [
				{
					"name": "Get Details of a User who has Subscribed an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/subscriptions/{{subscriptionId}}/subscriber-info"
					},
					"response": []
				}
			]
		},
		{
			"name": "Throttling Policies",
			"item": [
				{
					"name": "Get Details of a Policy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/throttling-policies/{{policyLevel}}/{{policyName}}"
					},
					"response": []
				},
				{
					"name": "Get All Throttling Policies for the Given Type",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/throttling-policies/{{policyLevel}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Client Certificates (Deprecated, Use Client-Certs)",
			"item": [
				{
					"name": "Retrieve/Search Uploaded Client Certificates",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/client-certificates"
					},
					"response": []
				},
				{
					"name": "Upload a New Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "certificate",
									"type": "file",
									"src": "/home/wso2/Documents/Peer Test artifacts/test-artifacts/test-artifacts/sample.crt"
								},
								{
									"key": "alias",
									"value": "test",
									"type": "text"
								},
								{
									"key": "apiId",
									"value": "{{apiId}}",
									"type": "text"
								},
								{
									"key": "tier",
									"value": "Gold",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/{{apiId}}/client-certificates"
					},
					"response": []
				},
				{
					"name": "Update a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "certificate",
									"type": "file",
									"src": "/home/wso2/Documents/Peer Test artifacts/test-artifacts/test-artifacts/sample.crt"
								},
								{
									"key": "tier",
									"value": "Gold",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/apis/{{apiId}}/client-certificates/{{alias}}"
					},
					"response": []
				},
				{
					"name": "Get the Certificate Information",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/client-certificates/{{alias}}"
					},
					"response": []
				},
				{
					"name": "Download a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/client-certificates/{{alias}}/content"
					},
					"response": []
				},
				{
					"name": "Delete a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/client-certificates/{{alias}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Endpoint Certificates",
			"item": [
				{
					"name": "Retrieve/Search Uploaded Certificates",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/endpoint-certificates"
					},
					"response": []
				},
				{
					"name": "Upload a New Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "certificate",
									"type": "file",
									"src": "/home/wso2/Documents/Peer Test artifacts/test-artifacts/test-artifacts/sample.crt"
								},
								{
									"key": "alias",
									"value": "{{alias}}",
									"type": "text"
								},
								{
									"key": "endpoint",
									"value": "{{endpoint}}",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/endpoint-certificates"
					},
					"response": []
				},
				{
					"name": "Get the Certificate Information",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/endpoint-certificates/{{alias}}"
					},
					"response": []
				},
				{
					"name": "Update a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "certificate",
									"type": "file",
									"src": "/home/wso2/Documents/Peer Test artifacts/test-artifacts/test-artifacts/sample.crt"
								}
							]
						},
						"url": "{{basepath}}/endpoint-certificates/{{alias}}"
					},
					"response": []
				},
				{
					"name": "Download a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/endpoint-certificates/{{alias}}/content"
					},
					"response": []
				},
				{
					"name": "Delete a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/endpoint-certificates/{{alias}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Unified Search",
			"item": [
				{
					"name": "Retrieve/Search APIs and API Documents by Content",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basepath}}/search?query={{searchTerm}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{searchTerm}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Roles",
			"item": [
				{
					"name": "Check Whether the Logged-in User has the Given Role",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/me/roles/{{roleId}}"
					},
					"response": []
				},
				{
					"name": "Check Whether Given Role Name already Exists",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "HEAD",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/roles/{{roleId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Retreive Publisher Settings",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/settings"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tenants",
			"item": [
				{
					"name": "Get Tenants by State",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basepath}}/tenants?state=active",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"tenants"
							],
							"query": [
								{
									"key": "state",
									"value": "active"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Whether the Given Tenant already Exists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "HEAD",
						"header": [],
						"url": "{{basepath}}/tenants/{{tenantId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Categories",
			"item": [
				{
					"name": "Get All API Categories",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/api-categories"
					},
					"response": []
				}
			]
		},
		{
			"name": "Scopes",
			"item": [
				{
					"name": "Add a New Shared Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"function isNullOrEmpty ( x ) {",
									"    return x === undefined || x === '' || x === null || typeof x === 'undefined';",
									"}",
									"",
									"function isNullOrEmptySpace( x ) {",
									"    return isNullOrEmpty( x ) || typeof x.trim === 'function' &&",
									"    isNullOrEmpty( x.trim().replace( / /g, '' ) );",
									"}",
									"",
									"function cleanBase64( input ) {",
									"    if ( isNullOrEmptySpace( input ) === true ) {",
									"        return '';",
									"    }",
									"    return input.replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');",
									"}",
									"",
									"function toBase64UrlEncoded( input ) {",
									"    var converted = btoa( input );",
									"    return cleanBase64( converted );",
									"}",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"scopeId\", response.id);",
									"pm.collectionVariables.set(\"scopeName\", toBase64UrlEncoded(response.name));",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"apim:api_publish\",\n\"displayName\": \"apim:api_publish\",\n\"description\": \"This Scope can used to publish APIs\",\n\"bindings\": [\"admin\"],\n\"usageCount\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/scopes"
					},
					"response": []
				},
				{
					"name": "Get All Available Shared Scopes",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/scopes"
					},
					"response": []
				},
				{
					"name": "Get a Shared Scope by Scope Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/scopes/{{scopeId}}"
					},
					"response": []
				},
				{
					"name": "Update a Shared Scope",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\": \"apim:api_publish\",\n\"displayName\": \"apim:api_publish\",\n\"description\": \"This Scope can used to publish APIs. Modified description.\",\n\"bindings\": [\"admin\"],\n\"usageCount\": 0\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/scopes/{{scopeId}}"
					},
					"response": []
				},
				{
					"name": "Check Whether Given Scope Name Already Exists",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "HEAD",
						"header": [],
						"url": "{{basepath}}/scopes/{{scopeName}}"
					},
					"response": []
				},
				{
					"name": "Get Usages of a Shared Scope by Scope Id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/scopes/{{scopeId}}/usage"
					},
					"response": []
				},
				{
					"name": "Delete a Shared Scope",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [],
						"url": "{{basepath}}/scopes/{{scopeId}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Key Managers",
			"item": [
				{
					"name": "Get All Key Managers",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/key-managers"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Monetization",
			"item": [
				{
					"name": "Configure Monetization for a Given API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"enabled\": true,\n  \"properties\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/monetize"
					},
					"response": []
				},
				{
					"name": "Get Monetization Status for Each Tier in a Given API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/monetization"
					},
					"response": []
				},
				{
					"name": "Get Total Revenue of a Given Monetized API with Meterd Billing",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{apiId}}/revenue"
					},
					"response": []
				},
				{
					"name": "Get Details of a Pending Invoice for a Monetized Subscription",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/subscriptions/{{subscriptionId}}/usage"
					},
					"response": []
				}
			]
		},
		{
			"name": "GraphQL Policies",
			"item": [
				{
					"name": "Get the Complexity Details of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{basepath}}/apis/{{graphqlApiId}}/graphql-policies/complexity"
					},
					"response": []
				},
				{
					"name": "Update Complexity Details of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"list\": [\n        {\n        \"type\": \"Country\",\n        \"field\": \"name\",\n        \"complexityValue\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{graphqlApiId}}/graphql-policies/complexity"
					},
					"response": []
				},
				{
					"name": "Retrieve Types and Fields of a GraphQL Schema",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"list\": [\n        {\n        \"type\": \"Country\",\n        \"field\": \"name\",\n        \"complexityValue\": 1\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{graphqlApiId}}/graphql-policies/complexity/types"
					},
					"response": []
				}
			]
		},
		{
			"name": "Client-Certs",
			"item": [
				{
					"name": "Retrieve/ Search Uploaded Client Certificates",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/client-certs/:keyType?limit=25&offset=0&alias=<string>",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"client-certs",
								":keyType"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Maximum size of resource array to return.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Starting point within the complete list of items qualified.\n"
								},
								{
									"key": "alias",
									"value": "<string>",
									"description": "Alias for the client certificate"
								}
							],
							"variable": [
								{
									"key": "keyType",
									"value": "<string>",
									"description": "(Required) Key type for the certificate"
								}
							]
						},
						"description": "This operation can be used to retrieve and search the uploaded client certificates of a given key type.\n"
					},
					"response": []
				},
				{
					"name": "Upload a New Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "alias",
									"value": "<string>",
									"description": "(Required) Alias for the certificate",
									"type": "text"
								},
								{
									"key": "certificate",
									"description": "(Required) The certificate that needs to be uploaded.",
									"type": "file",
									"src": []
								},
								{
									"key": "tier",
									"value": "<string>",
									"description": "(Required) API tier to which the certificate should be applied.",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/client-certs/:keyType",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"client-certs",
								":keyType"
							],
							"variable": [
								{
									"key": "keyType",
									"value": "<string>",
									"description": "(Required) Key type for the certificate"
								}
							]
						},
						"description": "This operation can be used to upload a new certificate for an endpoint of the given type.\n"
					},
					"response": []
				},
				{
					"name": "Get the Certificate Information",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/client-certs/:keyType/:alias",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"client-certs",
								":keyType",
								":alias"
							],
							"variable": [
								{
									"key": "keyType",
									"value": "<string>",
									"description": "(Required) Key type for the certificate"
								},
								{
									"key": "alias",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "This operation can be used to get the information about a certificate of a given key type.\n"
					},
					"response": []
				},
				{
					"name": "Update a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "certificate",
									"description": "The certificate that needs to be uploaded.",
									"type": "file",
									"src": []
								},
								{
									"key": "tier",
									"value": "<string>",
									"description": "The tier of the certificate",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/client-certs/:keyType/:alias",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"client-certs",
								":keyType",
								":alias"
							],
							"variable": [
								{
									"key": "keyType",
									"value": "<string>",
									"description": "(Required) Key type for the certificate"
								},
								{
									"key": "alias",
									"value": "<string>",
									"description": "(Required) Alias for the certificate"
								}
							]
						},
						"description": "This operation can be used to update an uploaded certificate of a given key type.\n"
					},
					"response": []
				},
				{
					"name": "Delete a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/client-certs/:keyType/:alias",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"client-certs",
								":keyType",
								":alias"
							],
							"variable": [
								{
									"key": "keyType",
									"value": "<string>",
									"description": "(Required) Key type for the certificate"
								},
								{
									"key": "alias",
									"value": "<string>",
									"description": "(Required) The alias of the certificate that should be deleted.\n"
								}
							]
						},
						"description": "This operation can be used to delete an uploaded certificate of a given key type.\n"
					},
					"response": []
				},
				{
					"name": "Download a Certificate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/client-certs/:keyType/:alias/content",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"client-certs",
								":keyType",
								":alias",
								"content"
							],
							"variable": [
								{
									"key": "keyType",
									"value": "<string>",
									"description": "(Required) The key type of the certificate that should be deleted.\n"
								},
								{
									"key": "alias",
									"value": "<string>",
									"description": "(Required) "
								}
							]
						},
						"description": "This operation can be used to download a certificate which matches the given alias and key type.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "LLM-Providers",
			"item": [
				{
					"name": "Get All LLM Providers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"if (response.list && response.list.length > 0 && response.list[0].id) {",
									"    pm.collectionVariables.set(\"llmProviderId\", response.list[0].id);",
									"    console.log(\"llmProviderId saved:\", response.list[0].id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/llm-providers",
						"description": "Get all LLM providers\n"
					},
					"response": []
				},
				{
					"name": "Get LLM Provider's API Definition",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/llm-providers/{{llmProviderId}}/api-definition",
						"description": "Get LLM Provider's API Definition\n"
					},
					"response": []
				},
				{
					"name": "Get LLM Provider",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/llm-providers/{{llmProviderId}}",
						"description": "Get a LLM Provider\n"
					},
					"response": []
				},
				{
					"name": "Get LLM Provider's Security Configurations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/llm-providers/{{llmProviderId}}/endpoint-configuration",
						"description": "Get LLM provider's endpoint security configurations\n"
					},
					"response": []
				},
				{
					"name": "Get LLM provider's model list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/llm-providers/{{llmProviderId}}/models",
						"description": "Get LLM provider's model list\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Workflows",
			"item": [
				{
					"name": "Retrieve All Pending Workflow Processes\n",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"if (response.list && response.list.length > 0 && response.list[0].referenceId) {",
									"    pm.collectionVariables.set(\"workflowReferenceId\", response.list[0].referenceId);",
									"    console.log(\"workflowReferenceId saved:\", response.list[0].referenceId);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/workflows?limit=25&offset=0&workflowType=AM_SUBSCRIPTION_CREATION",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"workflows"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Maximum size of resource array to return.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Starting point within the complete list of items qualified.\n"
								},
								{
									"key": "workflowType",
									"value": "AM_SUBSCRIPTION_CREATION",
									"description": "Workflow type can be AM_SUBSCRIPTION_CREATION, AM_SUBSCRIPTION_UPDATE.\n"
								}
							]
						},
						"description": "This operation can be used to retrieve list of workflow pending processes."
					},
					"response": []
				},
				{
					"name": "Update Workflow Status",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"status\": \"APPROVED\",\n    \"attributes\": {},\n    \"description\": \"Approve workflow request.\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/workflows/update-workflow-status?workflowReferenceId={{workflowReferenceId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"workflows",
								"update-workflow-status"
							],
							"query": [
								{
									"key": "workflowReferenceId",
									"value": "{{workflowReferenceId}}"
								}
							]
						},
						"description": "This operation can be used to approve or reject a workflow task.\n"
					},
					"response": []
				},
				{
					"name": "Get Pending Workflow Details by External Workflow Reference\n",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/workflows/{{workflowReferenceId}}",
						"description": "Using this operation, you can retrieve complete details of a pending workflow request that either belongs to application creation, application subscription, application registration, api state change, user self sign up.. You need to provide the External_Workflow_Reference of the workflow Request to retrive it.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Organizations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/organizations",
						"description": "Get all Registered Organizations\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get the Organization information of the user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/me/organization-information",
						"description": "Using this operation, logged-in user can get their organization information.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Endpoints",
			"item": [
				{
					"name": "Add an Endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"if (response.id) {",
									"    pm.collectionVariables.set(\"endpointId\", response.id);",
									"    console.log(\"endpointId saved:\", response.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{sampleEndpointObject}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/endpoints",
						"description": "This operation can be used to add an endpoint to an API.\n"
					},
					"response": []
				},
				{
					"name": "Get all API Endpoints",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/{{apiId}}/endpoints?limit=25&offset=0",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"{{apiId}}",
								"endpoints"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Maximum size of resource array to return.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Starting point within the complete list of items qualified.\n"
								}
							]
						},
						"description": "This operation can be used to get all the available endpoints of an API.\n"
					},
					"response": []
				},
				{
					"name": "Get an Endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/apis/{{apiId}}/endpoints/{{endpointId}}",
						"description": "This operation can be used to get an endpoint of an API by UUID.\n"
					},
					"response": []
				},
				{
					"name": "Update an Endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{sampleUpdateEndpointObject}}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/endpoints/{{endpointId}}",
						"description": "This operation can be used to update a API endpoint.\n"
					},
					"response": []
				},
				{
					"name": "Delete an Endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/apis/{{apiId}}/endpoints/{{endpointId}}",
						"description": "This operation can be used to delete a API endpoint.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "API Labels",
			"item": [
				{
					"name": "Get all Labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();",
									"",
									"if (response.list && response.list.length > 0 && response.list[0].id) {",
									"    pm.collectionVariables.set(\"labelId\", response.list[0].id);",
									"    console.log(\"labelId saved:\", response.list[0].id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/labels",
						"description": "Get all Labels\n"
					},
					"response": []
				},
				{
					"name": "Attach Labels to an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"labels\": [\n    \"{{labelId}}\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/attach-labels",
						"description": "This operation can be used to attach labels to an API.\n"
					},
					"response": []
				},
				{
					"name": "Detach Labels from an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"labels\": [\n    \"{{labelId}}\"\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/apis/{{apiId}}/detach-labels",
						"description": "This operation can be used to detach labels from an API.\n"
					},
					"response": []
				},
				{
					"name": "Get Labels of an API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/apis/{{apiId}}}/labels",
						"description": "This operation can be used to get the labels of an API.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "validate-mcp-server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"url\": \"https://db720294-98fd-40f4-85a1-cc6a3b65bc9a-prod.e1-us-east-azure.choreoapis.dev/godzilla/mcp-everything-server/v1.0\",\n  \"securityInfo\": {\n    \"isSecure\": false,\n    \"header\": \"\",\n    \"value\": \"\"\n  }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/validate-mcp-server",
						"description": "This operation can be used to validate a `url` of a third party mcp server\n"
					},
					"response": []
				},
				{
					"name": "Validate an OpenAPI Definition",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "url",
									"value": "https://petstore3.swagger.io/api/v3/openapi.json",
									"description": "OpenAPI definition url",
									"type": "text"
								},
								{
									"key": "file",
									"description": "OpenAPI definition as a file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "inlineAPIDefinition",
									"value": "string",
									"description": "Inline content of the OpenAPI definition",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/apis/validate-openapi?returnContent=false",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"validate-openapi"
							],
							"query": [
								{
									"key": "returnContent",
									"value": "false",
									"description": "Specify whether to return the full content of the OpenAPI definition in the response. This is only\napplicable when using url based validation\n"
								}
							]
						},
						"description": "This operation can be used to validate an OpenAPI definition and retrieve a summary. Provide either `url`\nor `file` to specify the definition.\n"
					},
					"response": []
				},
				{
					"name": "validate-endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/validate-endpoint?endpointUrl=https://petstore3.swagger.io/api/v3",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"validate-endpoint"
							],
							"query": [
								{
									"key": "endpointUrl",
									"value": "https://petstore3.swagger.io/api/v3",
									"description": "(Required) API endpoint url"
								}
							]
						},
						"description": "Using this operation, it is possible check whether the given MCP server URL is a valid url\n"
					},
					"response": []
				},
				{
					"name": "api-validate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/validate?query=test",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"validate"
							],
							"query": [
								{
									"key": "query",
									"value": "test",
									"description": "(Required) **Search condition**.\n\nYou can search in attributes by using an **\"<attribute>:\"** modifier.\n\nEg.\n\"name:wso2\" will match an API if the provider of the API is exactly \"wso2\".\n\nSupported attribute modifiers are [** version, context, name **]\n\nIf no advanced attribute modifier has been specified, search will match the\ngiven query string against API Name.\n"
								}
							]
						},
						"description": "Using this operation, you can check a given API context is already used. You need to provide the context name you want to check.\n"
					},
					"response": []
				},
				{
					"name": "validate",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/validate?query=name%3A",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"validate"
							],
							"query": [
								{
									"key": "query",
									"value": "name%3A",
									"description": "(Required) **Search condition**.\n\nYou can search in attributes by using an **\"<attribute>:\"** modifier.\n\nEg.\n\"name:wso2\" will match an MCP server if the provider of the API is exactly \"wso2\".\n\nSupported attribute modifiers are [** version, context, name **]\n\nIf no advanced attribute modifier has been specified, search will match the\ngiven query string against MCP server Name.\n"
								}
							]
						},
						"description": "Using this operation, you can check a given API context is already used. You need to provide the context name you want to check.\n"
					},
					"response": []
				},
				{
					"name": "validate-openapi",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "url",
									"value": "https://petstore3.swagger.io/api/v3/openapi.json",
									"description": "OpenAPI definition url",
									"type": "text"
								},
								{
									"key": "file",
									"description": "OpenAPI definition as a file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "inlineAPIDefinition",
									"value": "string",
									"description": "Inline content of the OpenAPI definition",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/mcp-servers/validate-openapi?returnContent=false",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"validate-openapi"
							],
							"query": [
								{
									"key": "returnContent",
									"value": "false",
									"description": "Specify whether to return the full content of the OpenAPI definition in the response. This is only\napplicable when using url based validation\n"
								}
							]
						},
						"description": "This operation can be used to validate an OpenAPI definition and retrieve a summary. Provide either `url`\nor `file` to specify the definition.\n"
					},
					"response": []
				},
				{
					"name": "validate-endpoint",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/validate-endpoint?endpointUrl=https://petstore3.swagger.io/api/v3",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"validate-endpoint"
							],
							"query": [
								{
									"key": "endpointUrl",
									"value": "https://petstore3.swagger.io/api/v3",
									"description": "(Required) API endpoint url"
								},
								{
									"key": "apiId",
									"value": "string",
									"description": "API ID consisting of the UUID of the API",
									"disabled": true
								}
							]
						},
						"description": "Using this operation, it is possible check whether the given API endpoint url is a valid url\n"
					},
					"response": []
				},
				{
					"name": "validate-wsdl",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "url",
									"value": "https://ws.cdyne.com/phoneverify/phoneverify.asmx?wsdl",
									"description": "Definition url",
									"type": "text"
								},
								{
									"key": "file",
									"description": "Definition to upload as a file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": "{{basepath}}/apis/validate-wsdl",
						"description": "This operation can be used to validate a WSDL definition and retrieve a summary. Provide either `url`\nor `file` to specify the definition.\n"
					},
					"response": []
				},
				{
					"name": "Validate a GraphQL SDL",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "(Required) Definition to upload as a file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "url",
									"value": "http://backend-service:8080/train-operations/graphql",
									"description": "Definition to upload using url",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{basepath}}/apis/validate-graphql-schema?useIntrospection=false",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"validate-graphql-schema"
							],
							"query": [
								{
									"key": "useIntrospection",
									"value": "false",
									"description": "Specify whether to use Introspection to obtain the GraphQL Schema\n"
								}
							]
						},
						"description": "This operation can be used to validate a graphQL definition and retrieve a summary.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Mcp-Servers",
			"item": [
				{
					"name": "Create a MCP server using an OpenAPI definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"if (response.id) {",
									"    pm.collectionVariables.set(\"mcpServerId\", response.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"disabled": true
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "additionalProperties",
									"value": "{\"name\":\"SwaggerPetstore-OpenAPI3.0\",\"version\":\"1.0.27\",\"context\":\"swaggerpetstore-openapi3.0.0\",\"gatewayType\":\"wso2/synapse\",\"policies\":[\"Unlimited\"],\"operations\":[{\"feature\":\"TOOL\",\"backendOperationMapping\":{\"backendId\":\"\",\"backendOperation\":{\"target\":\"/pet\",\"verb\":\"PUT\"}}},{\"feature\":\"TOOL\",\"backendOperationMapping\":{\"backendId\":\"\",\"backendOperation\":{\"target\":\"/pet\",\"verb\":\"POST\"}}},{\"feature\":\"TOOL\",\"backendOperationMapping\":{\"backendId\":\"\",\"backendOperation\":{\"target\":\"/pet/findByStatus\",\"verb\":\"GET\"}}},{\"feature\":\"TOOL\",\"backendOperationMapping\":{\"backendId\":\"\",\"backendOperation\":{\"target\":\"/pet/findByTags\",\"verb\":\"GET\"}}},{\"feature\":\"TOOL\",\"backendOperationMapping\":{\"backendId\":\"\",\"backendOperation\":{\"target\":\"/pet/{petId}\",\"verb\":\"GET\"}}}],\"endpointConfig\":{\"endpoint_type\":\"http\",\"sandbox_endpoints\":{\"url\":\"https://petstore3.swagger.io/api/v3\"},\"production_endpoints\":{\"url\":\"https://petstore3.swagger.io/api/v3\"}}}",
									"type": "text"
								},
								{
									"key": "url",
									"value": "https://petstore3.swagger.io/api/v3/openapi.json",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/mcp-servers/generate-from-openapi",
						"description": "This operation can be used to create a MCP server using the OpenAPI definition.\nProvide either `url` or `file` to specify the definition.\n\nSpecify additionalProperties with **at least** API's name, version, context and endpointConfig.\n"
					},
					"response": []
				},
				{
					"name": "Create an MCP server by proxying a third-party MCP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"mcpServerId\", response.id);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"url\": \"https://db720294-98fd-40f4-85a1-cc6a3b65bc9a-prod.e1-us-east-azure.choreoapis.dev/godzilla/mcp-everything-server/v1.0\",\n    \"additionalProperties\": {\n        \"name\": \"Test12\",\n        \"version\": \"1.0\",\n        \"context\": \"test12\",\n        \"policies\": [\n            \"Unlimited\"\n        ],\n        \"operations\": [\n            {\n                \"description\": \"Echoes back the input\",\n                \"feature\": \"TOOL\",\n                \"backendOperationMapping\": {\n                    \"backendId\": \"\",\n                    \"backendOperation\": {\n                        \"target\": \"echo\",\n                        \"verb\": \"TOOL\"\n                    }\n                }\n            },\n            {\n                \"description\": \"Adds two numbers\",\n                \"feature\": \"TOOL\",\n                \"backendOperationMapping\": {\n                    \"backendId\": \"\",\n                    \"backendOperation\": {\n                        \"target\": \"add\",\n                        \"verb\": \"TOOL\"\n                    }\n                }\n            },\n            {\n                \"description\": \"View the pizza menu. This tool provides a list of available pizzas.\",\n                \"feature\": \"TOOL\",\n                \"backendOperationMapping\": {\n                    \"backendId\": \"\",\n                    \"backendOperation\": {\n                        \"target\": \"viewPizzaMenu\",\n                        \"verb\": \"TOOL\"\n                    }\n                }\n            },\n            {\n                \"description\": \"Order a pizza from the menu. This tool allows you to place an order for a pizza.\",\n                \"feature\": \"TOOL\",\n                \"backendOperationMapping\": {\n                    \"backendId\": \"\",\n                    \"backendOperation\": {\n                        \"target\": \"orderPizza\",\n                        \"verb\": \"TOOL\"\n                    }\n                }\n            }\n        ],\n        \"endpointConfig\": {\n            \"endpoint_type\": \"http\",\n            \"sandbox_endpoints\": {\n                \"url\": \"https://db720294-98fd-40f4-85a1-cc6a3b65bc9a-prod.e1-us-east-azure.choreoapis.dev/godzilla/mcp-everything-server/v1.0\"\n            },\n            \"production_endpoints\": {\n                \"url\": \"https://db720294-98fd-40f4-85a1-cc6a3b65bc9a-prod.e1-us-east-azure.choreoapis.dev/godzilla/mcp-everything-server/v1.0\"\n            }\n        }\n    },\n    \"securityInfo\": {\n        \"isSecure\": false,\n        \"header\": \"\",\n        \"value\": \"\"\n    }\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/generate-from-mcp-server",
						"description": "This operation can be used to create a MCP server using a third party MCP Server.\n\nSpecify additionalProperties with **at least** API's name, version, context and endpointConfig.\n"
					},
					"response": []
				},
				{
					"name": "Create a New MCP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"mcpServerId\", response.id);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"exampleMCP\",\n    \"context\": \"exampleMCP\",\n    \"version\": \"1.03\",\n    \"policies\": [\n        \"Unlimited\"\n    ],\n    \"operations\": [\n        {\n            \"feature\": \"TOOL\",\n            \"apiOperationMapping\": {\n                \"apiId\": \"{{apiId}}\",\n                \"apiName\": \"PizzaShackAPI\",\n                \"apiVersion\": \"1.0.0\",\n                \"apiContext\": \"/pizza\",\n                \"backendOperation\": {\n                    \"target\": \"/order/{orderId}\",\n                    \"verb\": \"POST\"\n                }\n            }\n        }\n    ],\n    \"transport\": [\n        \"http\",\n        \"https\"\n    ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/mcp-servers/generate-from-api",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"generate-from-api"
							],
							"query": [
								{
									"key": "openAPIVersion",
									"value": "v3",
									"description": "Open API version",
									"disabled": true
								}
							]
						},
						"description": "This operation can be used to create a new MCP server using an existing API.\n"
					},
					"response": []
				},
				{
					"name": "Retrieve/Search MCP Servers",
					"protocolProfileBehavior": {
						"disableBodyPruning": true,
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "X-WSO2-Tenant",
								"value": "carbon.super",
								"description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n"
							},
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/mcp-servers?limit=25&offset=0",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Maximum size of resource array to return.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Starting point within the complete list of items qualified.\n"
								},
								{
									"key": "query",
									"value": "string",
									"description": "**Search condition**.\n\nYou can search in attributes by using an **\"<attribute>:\"** modifier.\n\nEg.\n\"provider:wso2\" will match an MCP server if the provider of the API contains \"wso2\".\n\"provider:\"wso2\"\" will match an API if the provider of the API is exactly \"wso2\".\n\"status:PUBLISHED\" will match an API if the API is in PUBLISHED state.\n\nAlso you can use combined modifiers\nEg. name:pizzashack version:v1 will match an API if the name of the API is pizzashack and version is v1.\n\nSupported attribute modifiers are [**version, context, name, status,\ndescription, provider, api-category, tags, doc, contexttemplate,\nlcstate, content, type, label, enablestore, thirdparty**]\n\nIf no advanced attribute modifier has been specified,  the API names containing\nthe search term will be returned as a result.\n\nPlease note that you need to use encoded URL (URL encoding) if you are using a client which does not \nsupport URL encoding (such as curl)\n",
									"disabled": true
								}
							]
						},
						"description": "This operation provides you a list of available MCP servers qualifying under a given search condition.\n\nEach retrieved API is represented with a minimal amount of attributes. If you want to get complete details, \nyou need to use **Get details of an MCP server** operation.\n"
					},
					"response": []
				},
				{
					"name": "Get Details of an MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "X-WSO2-Tenant",
								"value": "carbon.super",
								"description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n"
							},
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}",
						"description": "Using this operation, you can retrieve complete details of a single API. You need to provide the Id of the API \nto retrieve it.\n"
					},
					"response": []
				},
				{
					"name": "Delete a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}",
						"description": "This operation can be used to delete a MCP server by providing the Id of the MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Update a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":\"{{mcpServerId}}\",\"name\":\"test3\",\"displayName\":\"test3\",\"description\":null,\"context\":\"/test3\",\"endpointConfig\":null,\"version\":\"1.0\",\"provider\":\"admin\",\"lifeCycleStatus\":\"CREATED\",\"hasThumbnail\":false,\"isDefaultVersion\":false,\"isRevision\":false,\"revisionedMCPServerId\":null,\"revisionId\":0,\"enableSchemaValidation\":false,\"audiences\":[\"all\"],\"transport\":[\"http\",\"https\"],\"tags\":[],\"policies\":[\"Unlimited\"],\"organizationPolicies\":[],\"throttlingPolicy\":null,\"authorizationHeader\":\"Authorization\",\"apiKeyHeader\":\"ApiKey\",\"securityScheme\":[\"oauth_basic_auth_api_key_mandatory\",\"oauth2\"],\"maxTps\":null,\"visibility\":\"PUBLIC\",\"visibleRoles\":[],\"visibleTenants\":[],\"visibleOrganizations\":[\"none\"],\"mcpServerPolicies\":null,\"subscriptionAvailability\":\"CURRENT_TENANT\",\"subscriptionAvailableTenants\":[],\"additionalPropertiesMap\":{},\"monetization\":null,\"accessControl\":\"NONE\",\"accessControlRoles\":[],\"businessInformation\":{\"businessOwner\":null,\"businessOwnerEmail\":null,\"technicalOwner\":null,\"technicalOwnerEmail\":null},\"corsConfiguration\":{\"corsConfigurationEnabled\":true,\"accessControlAllowCredentials\":false,\"accessControlAllowOrigins\":[\"*\"],\"accessControlAllowHeaders\":[\"authorization\",\"Access-Control-Allow-Origin\",\"Content-Type\",\"SOAPAction\",\"apikey\",\"Internal-Key\",\"MCP-Protocol-Version\",\"Mcp-Session-Id\"],\"accessControlAllowMethods\":[\"GET\",\"PUT\",\"POST\",\"DELETE\",\"PATCH\",\"OPTIONS\"]},\"workflowStatus\":null,\"protocolVersion\":\"2025-06-18\",\"createdTime\":\"1761105685181\",\"lastUpdatedTimestamp\":\"1761105685207\",\"lastUpdatedTime\":\"2025-10-22 09:31:25.207\",\"subtypeConfiguration\":{\"subtype\":\"EXISTING_API\",\"configuration\":null},\"scopes\":[],\"operations\":[{\"id\":\"\",\"target\":\"post_order_by_orderId\",\"feature\":\"TOOL\",\"authType\":\"Application & Application User\",\"throttlingPolicy\":\"Unlimited\",\"scopes\":[],\"payloadSchema\":null,\"uriMapping\":null,\"schemaDefinition\":\"{\\n  \\\"type\\\" : \\\"object\\\",\\n  \\\"properties\\\" : {\\n    \\\"path_orderId\\\" : {\\n      \\\"type\\\" : \\\"string\\\"\\n    }\\n  },\\n  \\\"required\\\" : [ \\\"path_orderId\\\" ]\\n}\",\"description\":\"\",\"operationPolicies\":{\"request\":[],\"response\":[],\"fault\":[]},\"backendOperationMapping\":null,\"apiOperationMapping\":{\"apiId\":\"ef2b1833-53c0-43c8-a014-3ac592abac1f\",\"apiName\":\"PizzaShackAPI\",\"apiVersion\":\"1.0.0\",\"apiContext\":\"/pizza/1.0.0\",\"backendOperation\":{\"target\":\"/order/{orderId}\",\"verb\":\"POST\"}}}],\"categories\":[],\"keyManagers\":[\"all\"],\"gatewayVendor\":\"wso2\",\"gatewayType\":\"wso2/synapse\",\"initiatedFromGateway\":false}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}",
						"description": "This operation can be used to update an existing MCP Server.\nBut the properties `name`, `version`, `context`, `provider`, `state` will not be changed by this operation.\n"
					},
					"response": []
				},
				{
					"name": "Create a New MCP Server Version",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"8678e168-7d58-417b-883f-8923d53fc77b\",\n    \"name\": \"test3\",\n    \"displayName\": \"test3\",\n    \"description\": null,\n    \"context\": \"/test3\",\n    \"endpointConfig\": null,\n    \"version\": \"3.0\",\n    \"provider\": \"admin\",\n    \"lifeCycleStatus\": \"CREATED\",\n    \"hasThumbnail\": false,\n    \"isDefaultVersion\": false,\n    \"isRevision\": false,\n    \"revisionedMCPServerId\": null,\n    \"revisionId\": 0,\n    \"enableSchemaValidation\": false,\n    \"audiences\": [\n        \"all\"\n    ],\n    \"transport\": [\n        \"http\",\n        \"https\"\n    ],\n    \"tags\": [],\n    \"policies\": [\n        \"Unlimited\"\n    ],\n    \"organizationPolicies\": [],\n    \"throttlingPolicy\": null,\n    \"authorizationHeader\": \"Authorization\",\n    \"apiKeyHeader\": \"ApiKey\",\n    \"securityScheme\": [\n        \"oauth_basic_auth_api_key_mandatory\",\n        \"oauth2\"\n    ],\n    \"maxTps\": null,\n    \"visibility\": \"PUBLIC\",\n    \"visibleRoles\": [],\n    \"visibleTenants\": [],\n    \"visibleOrganizations\": [\n        \"none\"\n    ],\n    \"mcpServerPolicies\": null,\n    \"subscriptionAvailability\": \"CURRENT_TENANT\",\n    \"subscriptionAvailableTenants\": [],\n    \"additionalPropertiesMap\": {},\n    \"monetization\": null,\n    \"accessControl\": \"NONE\",\n    \"accessControlRoles\": [],\n    \"businessInformation\": {\n        \"businessOwner\": null,\n        \"businessOwnerEmail\": null,\n        \"technicalOwner\": null,\n        \"technicalOwnerEmail\": null\n    },\n    \"corsConfiguration\": {\n        \"corsConfigurationEnabled\": true,\n        \"accessControlAllowOrigins\": [\n            \"*\"\n        ],\n        \"accessControlAllowCredentials\": false,\n        \"accessControlAllowHeaders\": [\n            \"authorization\",\n            \"Access-Control-Allow-Origin\",\n            \"Content-Type\",\n            \"SOAPAction\",\n            \"apikey\",\n            \"Internal-Key\",\n            \"MCP-Protocol-Version\",\n            \"Mcp-Session-Id\"\n        ],\n        \"accessControlAllowMethods\": [\n            \"GET\",\n            \"PUT\",\n            \"POST\",\n            \"DELETE\",\n            \"PATCH\",\n            \"OPTIONS\"\n        ]\n    },\n    \"workflowStatus\": null,\n    \"protocolVersion\": \"2025-06-18\",\n    \"createdTime\": \"1761106136616\",\n    \"lastUpdatedTimestamp\": \"1761106136640\",\n    \"lastUpdatedTime\": \"2025-10-22 09:38:56.64\",\n    \"subtypeConfiguration\": {\n        \"subtype\": \"EXISTING_API\",\n        \"configuration\": null\n    },\n    \"scopes\": [],\n    \"operations\": [\n        {\n            \"id\": \"\",\n            \"target\": \"post_order_by_orderId\",\n            \"feature\": \"TOOL\",\n            \"authType\": \"Application & Application User\",\n            \"throttlingPolicy\": \"Unlimited\",\n            \"scopes\": [],\n            \"payloadSchema\": null,\n            \"uriMapping\": null,\n            \"schemaDefinition\": \"{\\n  \\\"type\\\" : \\\"object\\\",\\n  \\\"properties\\\" : {\\n    \\\"path_orderId\\\" : {\\n      \\\"type\\\" : \\\"string\\\"\\n    }\\n  },\\n  \\\"required\\\" : [ \\\"path_orderId\\\" ]\\n}\",\n            \"description\": \"\",\n            \"operationPolicies\": {\n                \"request\": [],\n                \"response\": [],\n                \"fault\": []\n            },\n            \"backendOperationMapping\": null,\n            \"apiOperationMapping\": {\n                \"apiId\": \"ef2b1833-53c0-43c8-a014-3ac592abac1f\",\n                \"apiName\": \"PizzaShackAPI\",\n                \"apiVersion\": \"1.0.0\",\n                \"apiContext\": \"/pizza/1.0.0\",\n                \"backendOperation\": {\n                    \"target\": \"/order/{orderId}\",\n                    \"verb\": \"POST\"\n                }\n            }\n        }\n    ],\n    \"categories\": [],\n    \"keyManagers\": [\n        \"all\"\n    ],\n    \"gatewayVendor\": \"wso2\",\n    \"gatewayType\": \"wso2/synapse\",\n    \"initiatedFromGateway\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/mcp-servers/copy-mcp-server?newVersion=5.0&defaultVersion=false&mcpServerId={{mcpServerId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"copy-mcp-server"
							],
							"query": [
								{
									"key": "newVersion",
									"value": "5.0",
									"description": "(Required) Version of the new MCP server."
								},
								{
									"key": "defaultVersion",
									"value": "false",
									"description": "Specifies whether new MCP server should be added as default version."
								},
								{
									"key": "serviceVersion",
									"value": "3.0",
									"description": "Version of the Service that will used in creating new version",
									"disabled": true
								},
								{
									"key": "mcpServerId",
									"value": "{{mcpServerId}}",
									"description": "(Required) **MCP Server ID** consisting of the **UUID** of the MCP Server**.\n"
								}
							]
						},
						"description": "This operation can be used to create a new version of an existing MCP server. The new version is specified as \n`newVersion` query parameter. New MCP server will be in `CREATED` state.\n"
					},
					"response": []
				},
				{
					"name": "Get Details of the Subscription Throttling Policies of a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "X-WSO2-Tenant",
								"value": "carbon.super",
								"description": "For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be\n  retirieved from.\n"
							},
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/subscription-policies?isAiApi=false&organizationID=string",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"subscription-policies"
							],
							"query": [
								{
									"key": "isAiApi",
									"value": "false",
									"description": "Indicates the quota policy type to be AI API quota or not.\n"
								},
								{
									"key": "organizationID",
									"value": "string",
									"description": "Indicates the organization ID\n"
								}
							]
						},
						"description": "This operation can be used to retrieve details of the subscription throttling policy of a MCP server by \nspecifying the API Id.\n\n`X-WSO2-Tenant` header can be used to retrive MCP server subscription throttling policies that belongs to a \ndifferent tenant domain. If not specified super tenant will be used. If Authorization header is present in the request, the user's tenant associated with the access token will be used.\n"
					},
					"response": []
				},
				{
					"name": "Generate internal API Key to invoke MCP Server.",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/generate-key",
						"description": "This operation can be used to generate internal api key which used to invoke MCP Server.\n"
					},
					"response": []
				},
				{
					"name": "Get Thumbnail Image of a MCP Server",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/thumbnail",
						"description": "This operation can be used to download a thumbnail image of a MCP Server\n"
					},
					"response": []
				},
				{
					"name": "Upload a Thumbnail Image for a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "(Required) Image to upload",
									"type": "file",
									"src": "postman-cloud:///1f0af023-1b90-45d0-8208-a3184d287979"
								}
							]
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/thumbnail",
						"description": "This operation can be used to upload a thumbnail image of a MCP server. The thumbnail to be uploaded should be \ngiven as a form data parameter `file`.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "MCP Server Revisions",
			"item": [
				{
					"name": "List Revisions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/revisions?query=string",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"revisions"
							],
							"query": [
								{
									"key": "query",
									"value": "string"
								}
							]
						},
						"description": "List available revisions of a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Create MCP Server Revision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"revisionId\", response.id);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"removed a post resource\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/revisions",
						"description": "Create a new MCP Server revision\n"
					},
					"response": []
				},
				{
					"name": "Retrieve revision of a MCP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/revisions/{{revisionId}}",
						"description": "Retrieve a revision of a MCP server\n"
					},
					"response": []
				},
				{
					"name": "Delete a MCP Server Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/revisions/{{revisionId}}",
						"description": "Delete a revision of a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Restore a MCP Server Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/restore-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"restore-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}"
								}
							]
						},
						"description": "Restore a revision to the current MCP server\n"
					},
					"response": []
				},
				{
					"name": "Deploy Revision",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"Default\",\n        \"vhost\": \"localhost\",\n        \"displayOnDevportal\": true\n    }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/deploy-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"deploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}",
									"description": "Revision ID of an API\n"
								}
							]
						},
						"description": "Deploy a revision of a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "UnDeploy Revision of a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"revisionUuid\": \"c26b2b9b-4632-4ca4-b6f3-521c8863990c\",\n    \"name\": \"Default\",\n    \"status\": \"CREATED\",\n    \"vhost\": \"mg.wso2.com\",\n    \"displayOnDevportal\": true\n  },\n  {\n    \"revisionUuid\": \"c26b2b9b-4632-4ca4-b6f3-521c8863990c\",\n    \"name\": \"Default\",\n    \"status\": \"CREATED\",\n    \"vhost\": \"mg.wso2.com\",\n    \"displayOnDevportal\": true\n  }\n]",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/undeploy-revision?revisionId={{revisionId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"undeploy-revision"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "{{revisionId}}",
									"description": "Revision ID of an API\n"
								},
								{
									"key": "revisionNumber",
									"value": "string",
									"description": "Revision Number of an API\n",
									"disabled": true
								},
								{
									"key": "allEnvironments",
									"value": "false",
									"disabled": true
								}
							]
						},
						"description": "UnDeploy a revision of a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "List Deployments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/deployments",
						"description": "List available deployed revision deployment details of a MCP Server\n"
					},
					"response": []
				},
				{
					"name": "Update Deployment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"revisionUuid\": \"{{deploymentId}}\",\n  \"name\": \"Default\",\n  \"status\": \"CREATED\",\n  \"vhost\": \"localhost\",\n  \"displayOnDevportal\": true\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/deployments/{{deploymentId}}",
						"description": "Update deployment devportal visibility\n"
					},
					"response": []
				},
				{
					"name": "Delete Pending Revision Deployment Workflow Tasks Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/cancel-revision-workflow/{{revisionId}}/:envName",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"cancel-revision-workflow",
								"{{revisionId}}",
								":envName"
							],
							"variable": [
								{
									"key": "envName",
									"value": "string",
									"description": "(Required) Environment name of an Revision\n"
								}
							]
						},
						"description": "This operation can be used to remove pending revision deployment requests that are in pending state\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "MCP Server Backends",
			"item": [
				{
					"name": "Get a list of backends of a MCP Server",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"",
									"if (response.length > 0) {",
									"    pm.collectionVariables.set(\"backendId\", response[0].id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/backends",
						"description": "This operation can be used to get a list of backends of a MCP server by the MCP Server UUID.\n"
					},
					"response": []
				},
				{
					"name": "Update a backend of a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"0c4439fd-9416-3c2e-be6e-1086e0b9aa93\",\n  \"name\": \"testttt\",\n  \"endpointConfig\": {},\n  \"definition\": \"string\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/backends/{{backendId}}",
						"description": "This operation can be used to update a backend of a MCP Server\n"
					},
					"response": []
				},
				{
					"name": "Get backends of a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/backends/{{backendId}}",
						"description": "This operation can be used to get a backend of a MCP Server\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "MCP Server Lifecycle",
			"item": [
				{
					"name": "Change MCP Server Status Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/change-lifecycle?action=Publish&mcpServerId={{mcpServerId}}",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"change-lifecycle"
							],
							"query": [
								{
									"key": "action",
									"value": "Publish",
									"description": "(Required) The action to demote or promote the state of the MCP server.\n\nSupported actions are [ **Publish**, **Deploy as a Prototype**, **Demote to Created**, **Block**, **Deprecate**, **Re-Publish**, **Retire** ]\n"
								},
								{
									"key": "lifecycleChecklist",
									"value": "string",
									"description": "\nSupported checklist items are as follows.\n1. **Deprecate old versions after publishing the MCP server**: Setting this to true will deprecate older versions of a particular API when it is promoted to Published state from Created state.\n2. **Requires re-subscription when publishing the MCP server**: If you set this to true, users need to re \nsubscribe to the MCP server although they may have subscribed to an older version.\nYou can specify additional checklist items by using an **\"attribute:\"** modifier.\nEg: \"Deprecate old versions after publishing the MCP server:true\" will deprecate older versions of a particular MCP server when it is promoted to Published state from Created state. Multiple checklist items can be given in \"attribute1:true, attribute2:false\" format.\n**Sample CURL :**  curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\" -X POST \"https://localhost:9443/api/am/publisher/v4/apis/change-lifecycle?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&action=Publish&lifecycleChecklist=Deprecate%20old%20versions%20after%20publishing%20the%20API%3Atrue,Requires%20re-subscription%20when%20publishing%20the%20API%3Afalse\"\n",
									"disabled": true
								},
								{
									"key": "mcpServerId",
									"value": "{{mcpServerId}}",
									"description": "(Required) **MCP Server ID** consisting of the **UUID** of the MCP Server**.\n"
								}
							]
						},
						"description": "This operation is used to change the lifecycle of a MCP server. Eg: Publish a MCP server which is in `CREATED` \nstate.\nIn order to change the lifecycle, we need to provide the lifecycle `action` as a query parameter.\n\nFor example, to Publish an MCP server, `action` should be `Publish`. Note that the `Re-publish` action is \navailable only after calling `Block`.\n\nSome actions supports providing additional parameters which should be provided as `lifecycleChecklist` \nparameter. Please see parameters table for more information.\n"
					},
					"response": []
				},
				{
					"name": "Get Lifecycle State Data of a MCP server. Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/lifecycle-state",
						"description": "This operation can be used to retrieve Lifecycle state data of a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Get Lifecycle State Change History of a MCP Server Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/lifecycle-history",
						"description": "This operation can be used to retrieve Lifecycle state change history of a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Delete Pending Lifecycle State Change Tasks Copy",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/lifecycle-state/pending-tasks",
						"description": "This operation can be used to remove pending lifecycle state change requests that are in pending state\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "Integrated APIs",
			"item": [
				{
					"name": "Retrieve the definition of an integrated API",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/apis/integrated-apis/{{vendor}}/definition?params=string",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"apis",
								"integrated-apis",
								"{{vendor}}",
								"definition"
							],
							"query": [
								{
									"key": "params",
									"value": "string",
									"description": "(Required) Parameters to retrieve the definition of an integrated API"
								}
							]
						},
						"description": "Retrieve the definition of an integrated API.\n"
					},
					"response": []
				},
				{
					"name": "Retrieve Integrated APIs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/apis/integrated-apis/{{vendor}}",
						"description": "Retrieve Integrated APIs.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "AIServiceProvider",
			"item": [
				{
					"name": "Get all AI Service providers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.text() && pm.response.text().trim() !== \"\") {",
									"    var response = pm.response.json();",
									"    if (response.list && response.list.length > 0) {",
									"        pm.collectionVariables.set(\"aiServiceProviderId\", response.list[0].id);",
									"    }",
									"} "
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/ai-service-providers",
						"description": "Get all AI Service providers\n"
					},
					"response": []
				},
				{
					"name": "Get AI Service Provider's API Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/ai-service-providers/{{aiServiceProviderId}}/api-definition",
						"description": "Get AI Service Provider's API Definition\n"
					},
					"response": []
				},
				{
					"name": "Get AI Service Provider's security configurations",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/ai-service-providers/{{aiServiceProviderId}}/endpoint-configuration",
						"description": "Get AI Service Provider's endpoint security configurations\n"
					},
					"response": []
				},
				{
					"name": "Get AI Service Provider's model list",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/ai-service-providers/{{aiServiceProviderId}}/models",
						"description": "Get AI Service Provider's model list\n"
					},
					"response": []
				},
				{
					"name": "Get AI Service Provider",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/ai-service-providers/{{aiServiceProviderId}}",
						"description": "Get a AI Service Provider\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "MCP Server Documents",
			"item": [
				{
					"name": "Get a List of Documents of a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/documents?limit=25&offset=0",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"documents"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Maximum size of resource array to return.\n"
								},
								{
									"key": "offset",
									"value": "0",
									"description": "Starting point within the complete list of items qualified.\n"
								}
							]
						},
						"description": "This operation can be used to retrieve a list of documents belonging to a MCP server by providing the ID of \nthe MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Add a New Document to a MCP server Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"documentId\", response.documentId);",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackDoc\",\n  \"sourceType\": \"INLINE\",\n  \"type\": \"HOWTO\",\n  \"visibility\": \"API_LEVEL\",\n  \"summary\": \"Summary of PizzaShackAPI Documentation\",\n  \"inlineContent\": \"This is doc content. This can have many lines.\",\n  \"createdBy\": \"admin\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/documents",
						"description": "This operation can be used to add a new documentation to a MCP server. This operation only adds the metadata \nof a document. To add the actual content we need to use **Upload the content of an MCP server document ** MCP\nserver once we obtain a document Id by this operation.\n"
					},
					"response": []
				},
				{
					"name": "Get a Document of a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/documents/{{documentId}}",
						"description": "This operation can be used to retrieve a particular document's metadata associated with a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Update a Document of a MCP Server",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"PizzaShackDoc\",\n  \"sourceType\": \"INLINE\",\n  \"type\": \"HOWTO\",\n  \"visibility\": \"API_LEVEL\",\n  \"summary\": \"Summary of PizzaShackAPI Documentation\",\n  \"inlineContent\": \"This is doc content. This can have many lines.\",\n  \"createdBy\": \"admin\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/documents/{{documentId}}",
						"description": "This operation can be used to update metadata of an MCP server's document.\n"
					},
					"response": []
				},
				{
					"name": "Delete a Document of a MCP Server Copy",
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"scope": "openid apim:api_view apim:policies_import_export apim:api_create apim:api_delete apim:api_publish apim:api_manage apim:subscription_view apim:subscription_block apim:subscription_manage apim:threat_protection_policy_create apim:threat_protection_policy_manage apim:document_create apim:document_manage apim:api_mediation_policy_manage apim:mediation_policy_view apim:mediation_policy_create apim:mediation_policy_manage apim:common_operation_policy_view apim:common_operation_policy_manage apim:gateway_policy_view apim:gateway_policy_manage apim:client_certificates_view apim:client_certificates_add apim:client_certificates_update apim:client_certificates_manage apim:ep_certificates_view apim:ep_certificates_add apim:ep_certificates_update apim:ep_certificates_manage apim:publisher_settings apim:pub_alert_manage apim:shared_scope_manage apim:app_import_export apim:api_import_export apim:api_product_import_export apim:api_generate_key apim:mcp_server_generate_key apim:admin apim:comment_view apim:comment_write apim:comment_manage apim:tier_view apim:tier_manage apim:api_list_view apim:api_definition_view apim:subscription_approval_view apim:subscription_approval_manage apim:llm_provider_read apim:publisher_organization_read apim:gov_policy_read apim:gov_result_read apim:gov_rule_read apim:mcp_server_view apim:mcp_server_list_view apim:mcp_server_create apim:mcp_server_delete apim:mcp_server_publish apim:mcp_server_manage apim:mcp_server_import_export",
								"accessTokenUrl": "https://localhost:9443/oauth2/token",
								"grant_type": "password_credentials"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/mcp-servers/:mcpServerId/documents/:documentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"mcp-servers",
								":mcpServerId",
								"documents",
								":documentId"
							],
							"variable": [
								{
									"key": "mcpServerId",
									"value": "string",
									"description": "(Required) **MCP Server ID** consisting of the **UUID** of the MCP Server.\n"
								},
								{
									"key": "documentId",
									"value": "string",
									"description": "(Required) Document Identifier\n"
								}
							]
						},
						"description": "This operation can be used to delete a document associated with a MCP server.\n"
					},
					"response": []
				},
				{
					"name": "Get the Content of a MCP Server Document",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "If-None-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on the ETag of the formerly retrieved\nvariant of the resource.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/documents/{{documentId}}/content",
						"description": "This operation can be used to retrieve the content of a MCP server's document.\n\nThe document can be of 3 types. In each cases responses are different.\n\n1. **Inline type**:\n   The content of the document will be retrieved in `text/plain` content type\n\n   _Sample cURL_ : `curl -k -H \"Authorization:Bearer 579f0af4-37be-35c7-81a4-f1f1e9ee7c51\" -F \ninlineContent=@\"docs.txt\" -X POST \"https://localhost:9443/api/am/publisher/v4/mcp-servers/995a4972-3178-4b17-a374-756e0e19127c/documents/43c2bcce-60e7-405f-bc36-e39c0c5e189e/content`\n2. **FILE type**:\n   The file will be downloaded with the related content type (eg. `application/pdf`)\n3. **URL type**:\n    The client will recieve the URL of the document as the Location header with the response with - `303 See Other`\n"
					},
					"response": []
				},
				{
					"name": "Upload the Content of a MCP Server Document",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"description": "Document to upload",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "inlineContent",
									"value": "<p>testttt Content</p>",
									"description": "Inline content of the document",
									"type": "text"
								}
							]
						},
						"url": "{{basepath}}/mcp-servers/{{mcpServerId}}/documents/{{documentId}}/content",
						"description": "This operation can be used to upload a file or add inline content to a MCP server document.\n\n**IMPORTANT:**\n* Either **file** or **inlineContent** form data parameters should be specified at one time.\n* Document's source type should be **FILE** in order to upload a file to the document using **file** parameter.\n* Document's source type should be **INLINE** in order to add inline content to the document using **inlineContent** parameter.\n"
					},
					"response": []
				},
				{
					"name": "Check Whether a Document with the Provided Name Exist",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{access-token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "If-Match",
								"value": "string",
								"description": "Validator for conditional requests; based on ETag.\n"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{basepath}}/mcp-servers/{{mcpServerId}}/documents/validate?name=test doc name",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"mcp-servers",
								"{{mcpServerId}}",
								"documents",
								"validate"
							],
							"query": [
								{
									"key": "name",
									"value": "test doc name",
									"description": "(Required) The name of the document which needs to be checked for the existence.\n"
								}
							]
						},
						"description": "This operation can be used to verify the document name exists or not.\n"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access-token",
			"value": "42607a35-21c0-340c-8a34-871b7c1e8518"
		},
		{
			"key": "apiId",
			"value": "688ab96c-e120-4aa6-a05b-db21309d0ad8"
		},
		{
			"key": "resourcePath",
			"value": "checkPhoneNumber"
		},
		{
			"key": "verb",
			"value": "post"
		},
		{
			"key": "sequenceType",
			"value": "in"
		},
		{
			"key": "resourcePolicyId",
			"value": "948d23e0-0927-4652-8373-eb8c01e7f7c4"
		},
		{
			"key": "newVersion",
			"value": "2.0"
		},
		{
			"key": "isDefaultVersion",
			"value": "false"
		},
		{
			"key": "lifecycleChecklist",
			"value": "Deprecate%20old%20versions%20after%20publishing%20the%20API%3Atrue,Requires%20re-subscription%20when%20publishing%20the%20API%3Afalse"
		},
		{
			"key": "action",
			"value": "Publish"
		},
		{
			"key": "endpointURL",
			"value": "https://petstore.swagger.io"
		},
		{
			"key": "api-name",
			"value": "PizzaShackAPI"
		},
		{
			"key": "basepath",
			"value": "https://localhost:9443/api/am/publisher/v4.4"
		},
		{
			"key": "documentId",
			"value": "f816c01a-afc7-49bd-92db-661ab99bab32"
		},
		{
			"key": "apiDocName",
			"value": "CalculatorDoc"
		},
		{
			"key": "operationPolicyId",
			"value": "44791bfe-080e-46ff-bf32-18103f729461"
		},
		{
			"key": "externalDevPortalIds",
			"value": "DeveloperPortal2"
		},
		{
			"key": "exportAPIProvider",
			"value": "admin"
		},
		{
			"key": "exportAPIVersion",
			"value": "1.0"
		},
		{
			"key": "exportAPIName",
			"value": "PizzaShackAPI"
		},
		{
			"key": "exportAPIFormat",
			"value": "YAML"
		},
		{
			"key": "exportAPIId",
			"value": "e0824883-3e86-403a-aec1-22bbc454eb7c"
		},
		{
			"key": "subscriptionId",
			"value": "58a7d387-d0a6-4042-90b2-677b51d4ddd0"
		},
		{
			"key": "blockState",
			"value": "PROD_ONLY_BLOCKED"
		},
		{
			"key": "policyLevel",
			"value": "api"
		},
		{
			"key": "policyName",
			"value": "10KPerMin"
		},
		{
			"key": "alias",
			"value": "test"
		},
		{
			"key": "endpoint",
			"value": "https://petstore.swagger.io"
		},
		{
			"key": "searchTerm",
			"value": "PizzaShackAPI"
		},
		{
			"key": "apiProductId",
			"value": "1cdedb2d-d062-4151-8b88-3c361ae7fe89"
		},
		{
			"key": "productDocumentId",
			"value": "19f2eaf5-a3e8-4f25-af52-adc92bb5c62c"
		},
		{
			"key": "roleId",
			"value": "SW50ZXJuYWwvcHVibGlzaGVy"
		},
		{
			"key": "tenantId",
			"value": "carbon.super"
		},
		{
			"key": "scopeId",
			"value": "50163120-db4a-402e-a326-c92432836cc5"
		},
		{
			"key": "scopeName",
			"value": "VGVzdFNjb3Bl"
		},
		{
			"key": "sampleRestAPIPayload",
			"value": "{\n    \"name\": \"PizzaShackAPI\",\n    \"description\": \"This is a simple API for Pizza Shack online pizza delivery store.\",\n    \"context\": \"pizza\",\n    \"version\": \"1.0.0\",\n    \"provider\": \"admin\",\n    \"lifeCycleStatus\": \"CREATED\",\n    \"responseCachingEnabled\": false,\n    \"hasThumbnail\": false,\n    \"isDefaultVersion\": false,\n    \"enableSchemaValidation\": false,\n    \"type\": \"HTTP\",\n    \"transport\": [\n      \"http\",\n      \"https\"\n    ],\n    \"tags\": [\n      \"substract\",\n      \"add\"\n    ],\n    \"policies\": [\n      \"Unlimited\"\n    ],\n    \"apiThrottlingPolicy\": \"Unlimited\",\n    \"securityScheme\": [\"oauth2\"],\n    \"maxTps\": {\n      \"production\": 1000,\n      \"sandbox\": 1000\n    },\n    \"visibility\": \"PUBLIC\",\n    \"visibleRoles\": [],\n    \"visibleTenants\": [],\n    \"subscriptionAvailability\": \"CURRENT_TENANT\",\n    \"additionalProperties\": [\n      {\n          \"name\" : \"AdditionalProperty\",\n          \"value\" : \"PropertyValue\",\n          \"display\" : true \n      }\n    ],\n    \"accessControl\": \"NONE\",\n    \"businessInformation\": {\n      \"businessOwner\": \"John Doe\",\n      \"businessOwnerEmail\": \"johndoe@wso2.com\",\n      \"technicalOwner\": \"Jane Roe\",\n      \"technicalOwnerEmail\": \"janeroe@wso2.com\"\n    },\n    \"endpointConfig\": {\n      \"endpoint_type\": \"http\",\n      \"sandbox_endpoints\": {\n        \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/\"\n      },\n      \"production_endpoints\": {\n        \"url\": \"https://localhost:9443/am/sample/pizzashack/v1/api/\"\n      }\n    },\n    \"operations\": [\n      {\n        \"target\": \"/order/{orderId}\",\n        \"verb\": \"POST\",\n        \"authType\": \"Application & Application User\",\n        \"throttlingPolicy\": \"Unlimited\"\n      },\n      {\n        \"target\": \"/menu\",\n        \"verb\": \"GET\",\n        \"authType\": \"Application & Application User\",\n        \"throttlingPolicy\": \"Unlimited\"\n      }\n    ]\n  }"
		},
		{
			"key": "sampleWebSocketAPIPayload",
			"value": "{\n  \"name\": \"EchoWebSocket\",\n  \"description\": \"This is a sample websocket API.\",\n  \"context\": \"echowebsocket\",\n  \"version\": \"1.0.0\",\n  \"provider\": \"admin\",\n  \"lifeCycleStatus\": \"CREATED\",\n  \"responseCachingEnabled\": false,\n  \"destinationStatsEnabled\": \"Disabled\",\n  \"hasThumbnail\": false,\n  \"isDefaultVersion\": false,\n  \"enableSchemaValidation\": false,\n  \"enableStore\": true,\n  \"type\": \"WS\",\n  \"transport\": [\n    \"http\",\n    \"https\"\n  ],\n  \"tags\": [\n    \"websocket\"\n  ],\n  \"policies\": [\n    \"Unlimited\"\n  ],\n  \"apiThrottlingPolicy\": \"Unlimited\",\n  \"securityScheme\": [\"oauth2\"],\n  \"maxTps\": {\n    \"production\": 1000,\n    \"sandbox\": 1000\n  },\n  \"visibility\": \"PUBLIC\",\n  \"visibleRoles\": [],\n  \"visibleTenants\": [],\n  \"gatewayEnvironments\": [\n    \"Production and Sandbox\"\n  ],\n  \"subscriptionAvailability\": \"CURRENT_TENANT\",\n  \"additionalProperties\": {\n    \"additionalProp1\": \"additionalPropVal1\"\n  },\n  \"accessControl\": \"NONE\",\n  \"businessInformation\": {\n    \"businessOwner\": \"John Doe\",\n    \"businessOwnerEmail\": \"johndoe@wso2.com\",\n    \"technicalOwner\": \"Jane Roe\",\n    \"technicalOwnerEmail\": \"janeroe@wso2.com\"\n  },\n  \"endpointConfig\": {\n    \"endpoint_type\": \"http\",\n    \"sandbox_endpoints\": {\n      \"url\": \"ws://echo.websocket.org:80\"\n    },\n    \"production_endpoints\": {\n      \"url\": \"ws://echo.websocket.org:80\"\n    }\n  }\n}"
		},
		{
			"key": "base64(username:password)",
			"value": "YWRtaW46YWRtaW4="
		},
		{
			"key": "globalMediationPolicyId",
			"value": "d48a3412-1b85-49be-99f4-b81a3722ae73"
		},
		{
			"key": "pizzashackAPIId",
			"value": "b4d4deba-3388-4983-99cd-ea0863e3e204"
		},
		{
			"key": "graphqlApiId",
			"value": ""
		},
		{
			"key": "wsdlApiId",
			"value": ""
		},
		{
			"key": "dcrClientId",
			"value": ""
		},
		{
			"key": "dcrClientSecret",
			"value": ""
		},
		{
			"key": "base64EncodedDCRCredentials",
			"value": ""
		},
		{
			"key": "tokenEndpoint",
			"value": "https://localhost:9443/oauth2/token"
		},
		{
			"key": "username",
			"value": "admin"
		},
		{
			"key": "password",
			"value": "admin"
		},
		{
			"key": "restAPIScopes",
			"value": "apim:admin apim:api_create apim:api_definition_view apim:api_delete apim:api_generate_key apim:api_import_export apim:api_list_view apim:api_manage apim:api_mediation_policy_manage apim:api_product_import_export apim:api_publish apim:api_view apim:app_import_export apim:client_certificates_add apim:client_certificates_manage apim:client_certificates_update apim:client_certificates_view apim:comment_manage apim:comment_view apim:comment_write apim:common_operation_policy_manage apim:common_operation_policy_view apim:document_create apim:document_manage apim:ep_certificates_add apim:ep_certificates_manage apim:ep_certificates_update apim:ep_certificates_view apim:gateway_policy_manage apim:gateway_policy_view apim:gov_policy_read apim:gov_result_read apim:gov_rule_read apim:llm_provider_read apim:mcp_server_create apim:mcp_server_delete apim:mcp_server_generate_key apim:mcp_server_import_export apim:mcp_server_list_view apim:mcp_server_manage apim:mcp_server_publish apim:mcp_server_view apim:mediation_policy_create apim:mediation_policy_manage apim:mediation_policy_view apim:policies_import_export apim:pub_alert_manage apim:publisher_organization_read apim:publisher_settings apim:shared_scope_manage apim:subscription_approval_manage apim:subscription_approval_view apim:subscription_block apim:subscription_manage apim:subscription_view apim:threat_protection_policy_create apim:threat_protection_policy_manage apim:tier_manage apim:tier_view openid"
		},
		{
			"key": "dcrEndpoint",
			"value": "https://localhost:9443/client-registration/v0.17/register"
		},
		{
			"key": "commentId",
			"value": "f4549748-eaee-4932-8dd0-df9f0c7efa2d"
		},
		{
			"key": "exportAPIProductName",
			"value": "PizzaShackAPIProduct"
		},
		{
			"key": "exportAPIProductVersion",
			"value": "1.0.0"
		},
		{
			"key": "exportAPIProductProvider",
			"value": "admin"
		},
		{
			"key": "exportAPIProductFormat",
			"value": "YAML"
		},
		{
			"key": "revisionId",
			"value": "45f76522-d293-4eb8-ab83-f3fde6098042"
		},
		{
			"key": "apiIdToDelete",
			"value": "6020a500-350a-4e2d-bd31-19a5355371d5"
		},
		{
			"key": "asyncApiId",
			"value": "c265ccd6-1a98-4744-840b-31bc9fc410e3"
		},
		{
			"key": "deploymentId",
			"value": "UHJvZHVjdGlvbiBhbmQgU2FuZGJveA=="
		},
		{
			"key": "llmProviderId",
			"value": "b3503af7-b36a-4441-b71b-3297af2a6b66"
		},
		{
			"key": "endpointId",
			"value": "123123123"
		},
		{
			"key": "sampleEndpointObject",
			"value": "{\n    \"id\": 123123123,\n    \"name\": \"First endpoint\",\n    \"deploymentStage\": \"PRODUCTION\",\n    \"endpointConfig\": {\n        \"endpoint_type\": \"http\",\n        \"endpoint_security\": {\n            \"production\": {\n                \"enabled\": true,\n                \"type\": \"apikey\",\n                \"apiKeyIdentifier\": \"Authorization\",\n                \"apiKeyValue\": \"Bearer 123\",\n                \"apiKeyIdentifierType\": \"HEADER\",\n                \"username\": \"\",\n                \"password\": null,\n                \"grantType\": \"\",\n                \"tokenUrl\": \"\",\n                \"clientId\": null,\n                \"clientSecret\": null,\n                \"customParameters\": {},\n                \"connectionTimeoutDuration\": -1,\n                \"connectionRequestTimeoutDuration\": -1,\n                \"socketTimeoutDuration\": -1,\n                \"proxyConfigs\": {\n                    \"proxyEnabled\": false,\n                    \"proxyHost\": \"\",\n                    \"proxyPort\": \"\",\n                    \"proxyUsername\": \"\",\n                    \"proxyPassword\": \"\",\n                    \"proxyProtocol\": \"\"\n                }\n            }\n        },\n        \"production_endpoints\": {\n            \"url\": \"https://google.com\"\n        }\n    }\n}"
		},
		{
			"key": "sampleUpdateEndpointObject",
			"value": "{\n    \"id\": \"123123123\",\n    \"name\": \"Updated Endpoint\",\n    \"deploymentStage\": \"PRODUCTION\",\n    \"endpointConfig\": {\n        \"endpoint_type\": \"http\",\n        \"endpoint_security\": {\n            \"production\": {\n                \"apiKeyValue\": \"\",\n                \"tokenUrl\": \"\",\n                \"clientId\": null,\n                \"connectionTimeoutDuration\": -1,\n                \"apiKeyIdentifier\": \"Authorization\",\n                \"type\": \"apikey\",\n                \"socketTimeoutDuration\": -1,\n                \"enabled\": true,\n                \"apiKeyIdentifierType\": \"HEADER\",\n                \"proxyConfigs\": {\n                    \"proxyEnabled\": false,\n                    \"proxyHost\": \"\",\n                    \"proxyPort\": \"\",\n                    \"proxyUsername\": \"\",\n                    \"proxyPassword\": \"\",\n                    \"proxyProtocol\": \"\"\n                },\n                \"password\": null,\n                \"clientSecret\": null,\n                \"customParameters\": {},\n                \"grantType\": \"\",\n                \"connectionRequestTimeoutDuration\": -1,\n                \"username\": \"\"\n            }\n        },\n        \"production_endpoints\": {\n            \"url\": \"https://google.com\"\n        }\n    }\n}"
		},
		{
			"key": "sampleDesignAssistantObject",
			"value": "{\"text\":\"Create an API for a banking transaction\",\"sessionId\":\"YzIyZjY1NTYtZWQ4Ni00ZjY5LThhY2EtNWJhMjcxYzAwYjhmLTIwMjUtMDktMTBUMTc6Mzg6MjguMDcxWg==\"}"
		},
		{
			"key": "workflowReferenceId",
			"value": "8f0378a1-e823-4b56-a8f6-b05ab722861d"
		},
		{
			"key": "labelId",
			"value": "80c31335-bf31-46c3-9566-354de9bb8fc7"
		},
		{
			"key": "serviceId",
			"value": "b3503af7-b36a-4441-b71b-3297af2a6b66"
		},
		{
			"key": "mcpServerId",
			"value": "febec5a6-0aa1-4bf8-bbfc-8d9c0028c676"
		},
		{
			"key": "vendor",
			"value": "solace"
		},
		{
			"key": "aiServiceProviderId",
			"value": "f1e5a547-ccf5-444d-ac9c-9f5467ad3cf6"
		},
		{
			"key": "revisionId",
			"value": "18c75d58-f344-4197-a3b0-8af1df00c61f"
		},
		{
			"key": "deploymentId",
			"value": "1df2401b-0582-4bab-8f42-49f0cc0d0e17"
		},
		{
			"key": "backendId",
			"value": "992519f7-56cb-4f99-bdfd-d1ae4261e7f1"
		},
		{
			"key": "commentId",
			"value": "2dcec5bc-7dc3-4785-8fe9-904785283050"
		},
		{
			"key": "documentId",
			"value": "7470d176-f056-4b64-9164-5e29a9d4adbf"
		}
	]
}