name: Claude Runner

on:
  issue_comment:
    types: [created]

jobs:
  run-claude:
    if: contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    env:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ORIGINAL_REPO: ${{ secrets.ORIGINAL_REPO }}
      REPO_OWNER: ${{ secrets.REPO_OWNER }}
      REPO_NAME: ${{ secrets.REPO_NAME }}
      LATEST_VERSION: ${{ secrets.LATEST_VERSION }}

    permissions:
        issues: write
        contents: write
        pull-requests: write
        id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Extract issue information
        id: issue_info
        run: |
          # Extract issue number from the context
          ISSUE_NUMBER=$(echo "${{ github.event.issue.number }}")
          ISSUE_TITLE=$(echo "${{ github.event.issue.title }}")
          ISSUE_BODY=$(echo "${{ github.event.issue.body }}")
          REPO_FULLNAME="${{ github.repository }}"
          
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "ISSUE_TITLE=$ISSUE_TITLE" >> $GITHUB_ENV
          echo "REPO_FULLNAME=$REPO_FULLNAME" >> $GITHUB_ENV
          
          # For debugging
          echo "Working on issue #$ISSUE_NUMBER in repository $REPO_FULLNAME"
          echo "Issue title: $ISSUE_TITLE"
          echo "Issue body: $ISSUE_BODY"
          
        
      - name: Verify system prompt file exists
        run: |
          echo "Workspace path: ${{ github.workspace }}"
          if [ -d "${{ github.workspace }}/.claude" ]; then
            echo ".claude directory exists"
            ls -la "${{ github.workspace }}/.claude"
          else
            echo "ERROR: .claude directory does not exist!"
            exit 1
          fi
          
          if [ -f "${{ github.workspace }}/.claude/system_prompt.txt" ]; then
            echo "system_prompt.txt exists"
            echo "First 10 lines of system_prompt.txt:"
            head -n 10 "${{ github.workspace }}/.claude/system_prompt.txt"
          else
            echo "ERROR: system_prompt.txt does not exist!"
            exit 1
          fi
      
      - name: Setup GitHub CLI for Claude
        run: |
          # Configure GitHub CLI to use the token without explicit login
          # GitHub CLI automatically uses GITHUB_TOKEN in GitHub Actions
          
          # Enable command approval for Claude
          mkdir -p ~/.config/gh/
          echo "command_approval: false" > ~/.config/gh/config.yml
          
          # Verify auth status (should already be authenticated)
          gh auth status || echo "GitHub CLI authentication check failed but continuing..."
          
          # Ensure the token is passed to Claude's environment
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
          
      - name: Setup Git for Claude
        run: |
          # Configure Git to use the provided token for authentication
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          
          # Set Git identity for commits (using GitHub Actions bot info)
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          
          # Test Git authentication (will help with debugging)
          echo "Testing Git authentication..."
          git ls-remote "https://github.com/${{ github.repository }}.git" HEAD || echo "Git authentication test failed but continuing..."
          
          # Make sure environment variables are available to Claude
          echo "GIT_USERNAME=${{ secrets.GIT_USERNAME }}" >> $GITHUB_ENV
          echo "GIT_EMAIL=${{ secrets.GIT_EMAIL }}" >> $GITHUB_ENV
          
      - name: Create GitHub CLI wrapper scripts
        run: |
          # Create a wrapper script for gh issue view
          cat > ${{ github.workspace }}/gh_issue_view.sh << 'EOF'
          #!/bin/bash
          
          # This is a pre-approved wrapper for the GitHub CLI issue view command
          if [ $# -lt 2 ]; then
            echo "Usage: $0 <issue-number> <repo>"
            exit 1
          fi
          
          ISSUE_NUMBER=$1
          REPO=$2
          
          # Run the GitHub CLI command with the provided arguments
          echo "Running: gh issue view $ISSUE_NUMBER --repo $REPO"
          gh issue view "$ISSUE_NUMBER" --repo "$REPO"
          if [ $? -ne 0 ]; then
            echo "Error: Failed to view issue #$ISSUE_NUMBER in repo $REPO"
            # Still return success to prevent workflow failure
            exit 0
          fi
          exit 0
          EOF
          
          # Create a wrapper for create PR
          cat > ${{ github.workspace }}/create_pr_for_claude.sh << 'EOF'
          #!/bin/bash
          
          # This is a pre-approved wrapper for creating a PR with Claude
          if [ $# -lt 5 ]; then
            echo "Usage: $0 <repo-dir> <branch-name> <commit-message> <pr-title> <pr-body> <base-branch>"
            exit 1
          fi
          
          REPO_DIR=$1
          BRANCH_NAME=$2
          COMMIT_MESSAGE=$3
          PR_TITLE=$4
          PR_BODY=$5
          BASE_BRANCH=${6:-main} # Default to 'main' if not provided
          
          # Navigate to the repository directory
          cd "$REPO_DIR" || { echo "Error: Directory $REPO_DIR not found"; exit 1; }
          
          # Create or switch to the branch
          git checkout -B "$BRANCH_NAME"
          
          # Stage all changes
          git add .
          
          # Commit the changes
          git commit -m "$COMMIT_MESSAGE"
          
          # Push the branch to the fork
          git push -u fork "$BRANCH_NAME"
          
          # Create the PR
          PR_URL=$(gh pr create --repo "$REPO" --title "$PR_TITLE" --body "$PR_BODY" --head "$BRANCH_NAME" --base "$BASE_BRANCH" 2>&1)
          
          if [ $? -ne 0 ]; then
            echo "Error: Failed to create PR"
            echo "Error details: $PR_URL"
            # Still return success to prevent workflow failure
            exit 0
          fi
          
          echo "PR created successfully: $PR_URL"
          exit 0
          EOF
          
          # Create a wrapper for updating issue labels
          cat > ${{ github.workspace }}/gh_update_labels.sh << 'EOF'
          #!/bin/bash
          
          # This is a pre-approved wrapper for the GitHub CLI issue edit command for labels
          if [ $# -lt 3 ]; then
            echo "Usage: $0 <issue-number> <action> <label>"
            echo "Action can be 'add' or 'remove'"
            exit 1
          fi
          
          ISSUE_NUMBER=$1
          ACTION=$2
          LABEL=$3
          REPO="${{ github.repository }}"
          
          echo "Updating issue #$ISSUE_NUMBER in $REPO: $ACTION label '$LABEL'"
          
          if [ "$ACTION" = "add" ]; then
            gh issue edit "$ISSUE_NUMBER" --repo "$REPO" --add-label "$LABEL"
            RESULT=$?
          elif [ "$ACTION" = "remove" ]; then
            gh issue edit "$ISSUE_NUMBER" --repo "$REPO" --remove-label "$LABEL"
            RESULT=$?
          else
            echo "Invalid action: $ACTION. Must be 'add' or 'remove'"
            exit 1
          fi
          
          if [ $RESULT -ne 0 ]; then
            echo "Warning: Failed to $ACTION label '$LABEL' to issue #$ISSUE_NUMBER"
            # Still return success to prevent workflow failure
            exit 0
          fi
          
          exit 0
          EOF
          
          # Make all scripts executable
          chmod +x ${{ github.workspace }}/gh_*.sh
          chmod +x ${{ github.workspace }}/setup_git_for_claude.sh
          chmod +x ${{ github.workspace }}/create_pr_for_claude.sh
          
          # List the created scripts for verification
          ls -la ${{ github.workspace }}/gh_*.sh
          ls -la ${{ github.workspace }}/setup_git_for_claude.sh
          ls -la ${{ github.workspace }}/create_pr_for_claude.sh
                

      - name: Run Claude Code on PR
        id: run-claude
        uses: anthropics/claude-code-action@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          REPO_FULLNAME: ${{ github.repository }}
          WORKSPACE_PATH: ${{ github.workspace }}
          # Pass repo info as environment variables
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ORIGINAL_REPO: ${{ secrets.ORIGINAL_REPO }}
        with:
            prompt: >-
              You are the intelligent AI Agent working on issue #${{ github.event.issue.number }} in the repository ${{ github.repository }}.
              The issue title is: "${{ github.event.issue.title }}"

              You need to fix the issue and create the PR for the relevant branch. Follow the instructions in the system prompt file carefully.
              
              STEP 1: SET UP THE REPOSITORY
              Instead of manually cloning and configuring Git, use the helper script to set up the repository:
              ```bash
              # Set up the repository for this issue
              ${{ github.workspace }}/setup_git_for_claude.sh ${{ github.event.issue.number }}
              
              # Capture the output values
              REPO_DIR=$(grep REPO_DIR= | cut -d= -f2)
              BRANCH_NAME=$(grep BRANCH_NAME= | cut -d= -f2)
              
              # Navigate to the repository directory
              cd "$REPO_DIR"
              ```
              
              STEP 2: VIEW THE ISSUE DETAILS
              Use the wrapper script to view the issue details:
              ```bash
              ${{ github.workspace }}/gh_issue_view.sh ${{ github.event.issue.number }} ${{ github.repository }}
              ```
              
              STEP 3: DETERMINE THE ISSUE VERSION AND MAKE THE NECESSARY CHANGES
              Based on the issue details, determine which files need to be modified and make the changes.
              
              STEP 4: CREATE THE PULL REQUEST
              After making the changes, use the helper script to create the PR:
              ```bash
              ${{ github.workspace }}/create_pr_for_claude.sh "$REPO_DIR" "$BRANCH_NAME" "Fix documentation issue" "Fix documentation issue" "This PR fixes the issue #${{ github.event.issue.number }}" "main"
              ```
              
              STEP 5: UPDATE THE ISSUE LABELS
              After creating the PR, update the issue labels:
              ```bash
              ${{ github.workspace }}/gh_update_labels.sh ${{ github.event.issue.number }} remove "claude:in-progress"
              ${{ github.workspace }}/gh_update_labels.sh ${{ github.event.issue.number }} add "claude:pr-created"
              ```
              
              If this issue appears in other versions of the repository, then you need to solve it in those versions as well and create PRs for each version.
              
              IMPORTANT: Instead of using GitHub CLI commands directly, use these pre-approved wrapper scripts:
              
              1. To view issue details:
                 ${{ github.workspace }}/gh_issue_view.sh ISSUE_NUMBER REPOSITORY
                 Example: ${{ github.workspace }}/gh_issue_view.sh ${{ github.event.issue.number }} ${{ github.repository }}
              
              2. To create a PR:
                 ${{ github.workspace }}/create_pr_for_claude.sh REPO_DIR BRANCH_NAME COMMIT_MESSAGE PR_TITLE PR_BODY BASE_BRANCH
                 Example: ${{ github.workspace }}/create_pr_for_claude.sh "$REPO_DIR" "$BRANCH_NAME" "Fix documentation issue" "Fix documentation issue" "This PR fixes the issue" "main"
              
              3. To update issue labels:
                 ${{ github.workspace }}/gh_update_labels.sh ISSUE_NUMBER ACTION LABEL
                 Example to remove 'in-progress': ${{ github.workspace }}/gh_update_labels.sh ${{ github.event.issue.number }} remove "claude:in-progress"
                 Example to add 'pr-created': ${{ github.workspace }}/gh_update_labels.sh ${{ github.event.issue.number }} add "claude:pr-created"
            anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
            claude_args: |
                --system-prompt "${{ github.workspace }}/.claude/system_prompt.txt"
                --max-turns 10
                --model claude-sonnet-4-20250514
                --allowedTools 'Edit,MultiEdit,Write,Read,Glob,Grep,LS,Bash(git:*),Bash(bun:*),Bash(npm:*),Bash(npx:*),Bash(gh:*)'
                

      - name: Remove 'claude:in-progress' label
        if: success() && steps.run-claude.outcome == 'success'
        uses: actions-ecosystem/action-remove-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: claude:in-progress

      - name: Add 'claude:pr-created' label
        if: success() && steps.run-claude.outcome == 'success'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: claude:pr-created
