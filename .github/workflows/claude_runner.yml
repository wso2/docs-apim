name: Claude Code â€¢ Auto PR on Comment

on:
  issue_comment:
    types: [created]

jobs:
  run-claude:
    if: contains(github.event.comment.body, '@AI-Agent')
    runs-on: ubuntu-latest

    steps:
      # Checkout from upstream repository
      - name: Checkout upstream repository
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.ORIGINAL_REPO }}  # Clone from upstream (e.g., wso2/docs-apim)
          token: ${{ secrets._GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history and branches
          
      # Add fork as remote and configure git
      - name: Add fork as remote and configure git
        run: |
          # Show current remotes for debugging
          echo "Current remotes before setup:"
          git remote -v
          
          # Add fork as remote (the actual fork repository)
          git remote add fork https://${{ secrets._GITHUB_TOKEN }}@github.com/${{ secrets.REPO_OWNER }}/${{ secrets.REPO_NAME }}.git
          git fetch fork
          
          # Set fork as the default push remote
          git remote set-url --push origin https://${{ secrets._GITHUB_TOKEN }}@github.com/${{ secrets.REPO_OWNER }}/${{ secrets.REPO_NAME }}.git
          
          # Show remotes after setup
          echo "Remotes after setup:"
          git remote -v
          
          # Configure git for commits
          git config user.name "${{secrets.GIT_USER_NAME}}"
          git config user.email "${{secrets.GIT_USER_EMAIL}}"

      - name: Prepare system prompt with environment variables
        id: prepare_prompt
        run: |
          # Install gettext if not available (for envsubst)
          if ! command -v envsubst &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y gettext-base
          fi
          
          # Export environment variables for substitution
          export ISSUE_NUMBER="${{ github.event.issue.number }}"
          export GITHUB_REPOSITORY="${{ github.repository }}"
          export REPO_OWNER="${{ secrets.REPO_OWNER }}"
          export REPO_NAME="${{ secrets.REPO_NAME }}"
          export ORIGINAL_REPO="${{ secrets.ORIGINAL_REPO }}"
          export BRANCH="${BRANCH:-main}"
          
          # Process the system prompt with variable substitution
          SYSTEM_PROMPT=$(envsubst < ${{github.workspace}}/.claude/system_prompt.txt)
          
          # Save to GitHub env
          echo "SYSTEM_PROMPT<<EOF" >> $GITHUB_ENV
          echo "$SYSTEM_PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Also set these for Claude
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "GITHUB_REPO=$GITHUB_REPOSITORY" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "REPO_OWNER=$REPO_OWNER" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
          echo "ORIGINAL_REPO=$ORIGINAL_REPO" >> $GITHUB_ENV


      - name: Run Claude
        id: run_claude
        uses: anthropics/claude-code-action@v1
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}  # Original repo (where issues are, target for PR)
          FORK_REPOSITORY: ${{ secrets.REPO_OWNER }}/${{ secrets.REPO_NAME }}  # Fork repo (source for PR)
          ISSUE_REPOSITORY: ${{ github.repository }}  # Explicitly specify where to get issues from (original repo)
          VERSION: ${{ env.VERSION }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          REPO_NAME: ${{ env.REPO_NAME }}
          ORIGINAL_REPO: ${{ env.ORIGINAL_REPO }}
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets._GITHUB_TOKEN }}
          prompt: ${{ env.SYSTEM_PROMPT }}
          trigger_phrase: "@AI-Agent"
          claude_args: |
            --allowedTools "Bash(git:*),mcp__github__create_pull_request,mcp__github__get_issue,mcp__github__search_pull_requests,mcp__github__list_branches,Edit,Read,Write,mcp__github__update_issue,mcp__github__create_branch"
            --model claude-sonnet-4-20250514
            
    #   # Update labels based on Claude result
    #   - name: Update labels on success
    #     if: success() && steps.run_claude.outcome == 'success'
    #     run: |
    #       gh issue edit ${{ github.event.issue.number }} --remove-label "claude:in-progress" --add-label "claude:pr-created" --repo ${{ github.repository }}
    #     env:
    #       GITHUB_TOKEN: ${{ github.token }}


